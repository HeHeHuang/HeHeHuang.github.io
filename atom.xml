<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuangheheTech</title>
  
  
  <link href="https://hehehuang.github.io/atom.xml" rel="self"/>
  
  <link href="https://hehehuang.github.io/"/>
  <updated>2023-05-21T03:51:46.213Z</updated>
  <id>https://hehehuang.github.io/</id>
  
  <author>
    <name>Huang He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Azure</title>
    <link href="https://hehehuang.github.io/2023/05/21/Azure/"/>
    <id>https://hehehuang.github.io/2023/05/21/Azure/</id>
    <published>2023-05-21T03:50:26.000Z</published>
    <updated>2023-05-21T03:51:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>azure for data engineer </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;azure for data engineer &lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>量化投资</title>
    <link href="https://hehehuang.github.io/2023/02/23/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/"/>
    <id>https://hehehuang.github.io/2023/02/23/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/</id>
    <published>2023-02-23T14:27:53.000Z</published>
    <updated>2023-02-23T14:27:53.928Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>金融讲义</title>
    <link href="https://hehehuang.github.io/2023/02/20/%E9%87%91%E8%9E%8D%E8%AE%B2%E4%B9%89/"/>
    <id>https://hehehuang.github.io/2023/02/20/%E9%87%91%E8%9E%8D%E8%AE%B2%E4%B9%89/</id>
    <published>2023-02-20T15:44:45.000Z</published>
    <updated>2023-03-06T15:48:44.141Z</updated>
    
    <content type="html"><![CDATA[<p>金融</p><p>jingrong reset</p><p>CFA LEVEL 1 </p><p>CAPC</p><p>azure  </p><p>CABP</p><p>zhishitixi</p><p>siweimoxing</p><p>taxi</p><p>haha</p><p>shish</p><p>知识是被证实为真的信念</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;金融&lt;/p&gt;
&lt;p&gt;jingrong reset&lt;/p&gt;
&lt;p&gt;CFA LEVEL 1 &lt;/p&gt;
&lt;p&gt;CAPC&lt;/p&gt;
&lt;p&gt;azure  &lt;/p&gt;
&lt;p&gt;CABP&lt;/p&gt;
&lt;p&gt;zhishitixi&lt;/p&gt;
&lt;p&gt;siweimoxing&lt;/p&gt;
&lt;p&gt;taxi&lt;/p&gt;
</summary>
      
    
    
    
    <category term="金融" scheme="https://hehehuang.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>自我认知</title>
    <link href="https://hehehuang.github.io/2023/02/15/%E8%87%AA%E6%88%91%E8%AE%A4%E7%9F%A5/"/>
    <id>https://hehehuang.github.io/2023/02/15/%E8%87%AA%E6%88%91%E8%AE%A4%E7%9F%A5/</id>
    <published>2023-02-15T15:49:02.000Z</published>
    <updated>2023-02-20T15:43:49.727Z</updated>
    
    <content type="html"><![CDATA[<p>hhii mei kaishi </p><p>hhhhh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hhii mei kaishi &lt;/p&gt;
&lt;p&gt;hhhhh&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>思维模型</title>
    <link href="https://hehehuang.github.io/2023/02/14/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/"/>
    <id>https://hehehuang.github.io/2023/02/14/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/</id>
    <published>2023-02-14T15:23:24.000Z</published>
    <updated>2023-02-15T15:46:31.085Z</updated>
    
    <content type="html"><![CDATA[<p>思考的本质</p><p>思维方式</p><p>心智模型</p><p>思维模型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;思考的本质&lt;/p&gt;
&lt;p&gt;思维方式&lt;/p&gt;
&lt;p&gt;心智模型&lt;/p&gt;
&lt;p&gt;思维模型&lt;/p&gt;
</summary>
      
    
    
    
    <category term="超级学习" scheme="https://hehehuang.github.io/categories/%E8%B6%85%E7%BA%A7%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>知识体系</title>
    <link href="https://hehehuang.github.io/2023/02/12/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>https://hehehuang.github.io/2023/02/12/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</id>
    <published>2023-02-12T15:58:57.000Z</published>
    <updated>2023-02-12T15:58:58.017Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python Automation</title>
    <link href="https://hehehuang.github.io/2022/12/06/Python-Automation/"/>
    <id>https://hehehuang.github.io/2022/12/06/Python-Automation/</id>
    <published>2022-12-06T14:17:08.000Z</published>
    <updated>2023-01-15T15:17:19.155Z</updated>
    
    <content type="html"><![CDATA[<p>python 自动化 操作文档</p><p>word</p><p>PPT</p><p>excel</p><p>scape</p><p>tomorrow</p><p>the redirect path</p><p>只管去做：</p><p>为什么会焦虑？</p><p>小强升职记</p><p>项目与习惯</p><p>需求分析哈哈哈</p><p>time to chengdu </p><p>英语练习</p><p>住房搞定</p><p>一切顺利 重新起航。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python 自动化 操作文档&lt;/p&gt;
&lt;p&gt;word&lt;/p&gt;
&lt;p&gt;PPT&lt;/p&gt;
&lt;p&gt;excel&lt;/p&gt;
&lt;p&gt;scape&lt;/p&gt;
&lt;p&gt;tomorrow&lt;/p&gt;
&lt;p&gt;the redirect path&lt;/p&gt;
&lt;p&gt;只管去做：&lt;/p&gt;
&lt;p&gt;为什么会焦虑？&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Requirement Analysis</title>
    <link href="https://hehehuang.github.io/2022/12/03/Requirement-Analysis/"/>
    <id>https://hehehuang.github.io/2022/12/03/Requirement-Analysis/</id>
    <published>2022-12-03T12:17:52.000Z</published>
    <updated>2022-12-05T13:44:11.570Z</updated>
    
    <content type="html"><![CDATA[<p>requirement analysis</p><p>怎么做需求？</p><p>需求分析</p><p>大话软件工程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;requirement analysis&lt;/p&gt;
&lt;p&gt;怎么做需求？&lt;/p&gt;
&lt;p&gt;需求分析&lt;/p&gt;
&lt;p&gt;大话软件工程&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Learning Method</title>
    <link href="https://hehehuang.github.io/2022/11/28/Learning-Method/"/>
    <id>https://hehehuang.github.io/2022/11/28/Learning-Method/</id>
    <published>2022-11-28T02:45:55.000Z</published>
    <updated>2022-11-28T04:19:29.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习究竟是什么？"><a href="#学习究竟是什么？" class="headerlink" title="学习究竟是什么？"></a>学习究竟是什么？</h2><h4 id="刻意练习："><a href="#刻意练习：" class="headerlink" title="刻意练习："></a>刻意练习：</h4><h5 id="1-学习区练习"><a href="#1-学习区练习" class="headerlink" title="1.学习区练习"></a>1.学习区练习</h5><ul><li>85%熟悉的+15%不知道的知识</li><li>舒适区-&gt;学习区-&gt;恐慌区</li></ul><h5 id="2-切成小块重复练习"><a href="#2-切成小块重复练习" class="headerlink" title="2.切成小块重复练习"></a>2.切成小块重复练习</h5><ul><li>列出所有知识点，一个个练习，学会了就转入下一个</li><li>基础训练，训练套路：比如：编程中的数据结构</li><li>专家：用短时记忆调取自己无限的长期记忆</li></ul><h5 id="3-整个学习，随时获得有效反馈"><a href="#3-整个学习，随时获得有效反馈" class="headerlink" title="3.整个学习，随时获得有效反馈"></a>3.整个学习，随时获得有效反馈</h5><ul><li>自己调研相关知识</li><li>独立或者跟人合作完成项目</li><li>写论文</li></ul><h5 id="4-练习时，注意力高度集中"><a href="#4-练习时，注意力高度集中" class="headerlink" title="4.练习时，注意力高度集中"></a>4.练习时，注意力高度集中</h5><ul><li>番茄钟</li><li>间隔、测验和建立连接。<ul><li>ANKI： 安排间隔，不要突击</li><li>不同场景，不同方式学同一个内容</li><li>参加测验</li><li>新旧知识连接</li></ul></li></ul><h4 id="思维模式："><a href="#思维模式：" class="headerlink" title="思维模式："></a>思维模式：</h4><h5 id="成长性思维："><a href="#成长性思维：" class="headerlink" title="成长性思维："></a>成长性思维：</h5><p>任务是学习的机会，努力，什么事情都是能做成的</p><h5 id="交叉学习："><a href="#交叉学习：" class="headerlink" title="交叉学习："></a>交叉学习：</h5><p>储存记忆+提取记忆：提取强度越用越高。每一次提取记忆，提取强度都会增加。 交叉着在同一时期内学习几门课程，比学完一门再学一门的效果好得多。读书也是这样。我们应该随时都有好几本书在读。</p><h4 id="“自学”的学问"><a href="#“自学”的学问" class="headerlink" title="“自学”的学问"></a>“自学”的学问</h4><p>（1）自学于文本。自学成败的关键，在于你是否善于处理文本信息。我们可以把文本功夫分成三级。</p><p>第一级，是阅读一段文字，或者听一节课，你能不能抓住它的要点。这是基本功，练习这个功夫的方法是<strong>记笔记</strong>。</p><p>第二级，是有一个问题，你能不能从一堆书里找到答案。</p><p>第三级，是建立自己的系统。</p><p>（2）自学于操作理论和实践结合，把学到的东西及时在实践中反复纠错、强化，达到深刻理解和使用。</p><p>（3）从自学到精通一个需要啥就能学啥，学啥就能会啥的人，必定是一个高自尊的人。他对生活有强烈的掌控感，无所畏惧，游刃有余，宠辱不惊。</p><h4 id="强力研读笔记法"><a href="#强力研读笔记法" class="headerlink" title="强力研读笔记法"></a><strong>强力研读笔记法</strong></h4><p>读书笔记的一个重大作用是给自己日后以最快的速度重温这本书提供方便，直接看笔记就可以了。强力研读要求读书笔记必须包括四方面的内容：第一，清晰表现每一章的逻辑脉络；第二，带走书中所有的亮点；第三，大量自己的看法和心得；第四，发现这本书和以前读过的其他书或文章的联系。</p><p>（1）清晰表现每一张的逻辑脉络。我习惯完全按照原书的章节给读书笔记划分章节，甚至保留各章的标题。在每一章的开头，用自己的话写下这一章作者到底想说什么，各章串起来就形成了系统。不过这种内容提要并不重要，重要的是一定要能看书作者的逻辑脉络。大多数人之所以没有真正理解一本书，就是因为看不到这个脉络。读书笔记的第一作用就是抛开故事记住文章。让一本书从厚变薄，从具体的山川景色变成抽象的地图。只有当你跳出字里行间，以居高临下的姿态俯视全章，它的脉络层次能变得清晰。看清楚以后不要抄作者的话，用自己的语言把这个脉络写出来，就好像画地图一样。</p><p>（2）带走书中所有的亮点。笔记，是我听说了一个想法之后很激动，必须把这个想法记下来据为己有的行为。所以逻辑脉络之外，如果发现真正好的小故事—我们称之为“亮点”，那么就把这个故事也写下来，甚至具体到细节。一方面，将来万一要做写文章之类的事，从笔记里翻出来就可以用。更重要的一点是这些故事日后会将反复地在我们的大脑中出现，它们用各种出其不意的方式左右我们的思想，甚至改变我们对世界的认识。你<strong>不得不承认有些段子的生命力就是比其原来所在的文章更长，以至于最后成为典故。读</strong>书，在某种程度上就是寻找能够刺激自己思维的那些亮点。我们在分析脉络的时候要忽略故事，分析完脉络再把故事带走。</p><p>（3）大量自己的看法和心得。你不可能对说得好的一句话无动于衷。你可以写下自己对这件事的理解，你还可以写下对作者的质疑或肯定。更高级的批注则是写下自己因为看到这段文字而产生的灵感。一本好书每一章都能让人迸发出10个以上的灵感。<strong>也许你突然想到这解决了你之前一直关注的问题</strong>，尽管这个问题看似与此书无关；<strong>也许你想到了对书中思想的一个新的应用；也许你想到你可以把作者的理论往前推一步。</strong>这些想法未必都真的有用，但是都非常宝贵，因为如果你不马上记下来，它们就很快被忘记。</p><p>（4）发现这本书和以前读过的其他书或文章的联系。现代人写的书，极少有一本书中的思想完全独立于世界，往往真正新的知识都建立在旧的知识之上。对着书中的观点，有没有更新的证据支持或反对这个结论？要找到他们的共同点和不同点。一个真正善于主动读书的人对这种联系是非常非常敏感的。如果你读过足够多的书，你会获得一种更难得的精力：感受人类知识的进度。你会发现一个问题在这本书里是这个说法，而过了几年之后有人另写的一本书中，引用了更有利的证据，把整个结论改变了；有时候你必须从几本书的几个不同结论中判断哪个是靠谱的；有时候你会觉得他们说的其实都不对，只有你知道正确答案。到了这个层次，你已经跟书的作者完全平等了。这时候，你进入了读书的高阶状态。读书是求知的过程，知识在转化成你对世界的理解前只是信息，对待信息，你需要有批判性思维去分辨哪些是事实，哪些是作者的观点，作者的观点是否有足够的论据支撑。看书的时候不盲从，不全盘接收，用批判性思维去评判作者的观点，建立和书籍的交互。</p><p>（5）笔记是对一本好书最大的敬意。好书之所以要读两遍，最重要的目的就是获得这些心得、灵感和联系。我们对一本不太熟悉的书，第一次读的时候我们往往会陷入作者的思想之中，我们大脑全部的带宽都被用于理解作者的思想，而没有更多的余地去产生别的想法了。“幽默是智力过剩的体现”，<strong>想法也只在带宽过剩的时候才会冒出来。</strong>只有当你读第二遍的时候，你才能气定神闲地发表意见。第一遍是为了陷进去，第二遍是为了跳出来。</p><h2 id="学习之道（11天高效入门）"><a href="#学习之道（11天高效入门）" class="headerlink" title="学习之道（11天高效入门）"></a>学习之道（11天高效入门）</h2><h4 id="自主学习者：元认知学习模型"><a href="#自主学习者：元认知学习模型" class="headerlink" title="自主学习者：元认知学习模型"></a>自主学习者：元认知学习模型</h4><h5 id="理解学习任务"><a href="#理解学习任务" class="headerlink" title="理解学习任务"></a>理解学习任务</h5><ul><li>了解需要掌握什么？</li><li>需要重现还是泛化？</li><li>你将被如何评估</li><li>拥有的时间和资源</li></ul><h5 id="制定目标"><a href="#制定目标" class="headerlink" title="制定目标"></a>制定目标</h5><ul><li>想想雄心壮志</li><li>想想要达成什么样的水平</li><li>然后把任务分成具体目标</li><li>计划何时，何地以及如何去实现这些目标</li><li>例子：研究机器学习的SVM，目标：能够很好的理解他的过程，以至于你可以向任何人解释他。为了这一目的，计划，以三个不同的来源阅读有关光合作用的资料，并且练习<strong>阐释</strong>技巧</li></ul><h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><ul><li><p>根据计划进行学习，尝试不同的学习工具</p></li><li><p>番茄钟：避免多重任务</p></li><li><p>发散模式与集中模式</p></li><li><p>主动学习： 主动回忆和阐释</p></li><li><p>交叉学习与记忆</p></li><li><p>工作记忆</p></li><li><p>3.深度学习□进行主动学习：练习主动回忆（“检索练习”）和阐释。□进行交叉学习和间隔安排学习时间。□不要一门心思去做简单的事情，要挑战自己。□保证充足的睡眠并坚持积极锻炼身体。</p></li><li><p>4.最大限度利用工作记忆</p><p>​□把学习内容分成小组块，把花哨难懂的说法换成简单的说法。□使用待办事项清单来清空你的工作记忆</p><p>5.有效记忆□使用以下记忆窍门来加速记忆：缩略语、图像和记忆宫殿。□使用隐喻来快速掌握新概念。6.获得直觉并敏捷地思考□内化（不要只是死记硬背）解决重要科学或数学问题的程序。□利用恰当的手势来帮助你记住并理解新的语言词汇。</p><p>7.发挥自律能力□想方设法在不依赖自律能力的情况下克服挑战。□从周围环境中消除诱惑、障碍和让人分心的事物。□改变你的习惯。□规划好你的目标，识别障碍并提前确定应对障碍的理想方式。</p><p>8.激励自己□提醒自己完成任务能带来的所有好处。□完成困难的任务后奖励自己。□确保任务的难度与你的技能相匹配。□设定目标：长期目标、里程碑目标和过程目标。</p><p>9.进行有效阅读□在详细阅读文本之前先对文本进行预览。□主动阅读：对文本进行思考，练习主动回忆和做批注。</p><p>9.进行有效阅读□在详细阅读文本之前先对文本进行预览。□主动阅读：对文本进行思考，练习主动回忆和做批注。</p><p>10.在考试中大获全胜□尽可能全面地了解考试相关信息并制订备考计划。□练习做以往的考试题。□在考试期间仔细阅读考试说明，把握时间进度并检查答案。□使用“硬启动”技巧。11.成为一名专业学习者□做一名拥有元认知能力的学习者：理解任务、设定目标和计划、学习、监控与调整。□从过去的经验中汲取教训：评估哪些方面进展顺利，哪些方面可以改进。</p></li></ul><h5 id="监控和调整"><a href="#监控和调整" class="headerlink" title="监控和调整"></a>监控和调整</h5><ul><li>你是否真的在进步</li><li>你是否使用最佳的学习策略</li><li>学习方式是不是合适</li></ul><h2 id="高效学习（得到版本）"><a href="#高效学习（得到版本）" class="headerlink" title="高效学习（得到版本）"></a>高效学习（得到版本）</h2><h2 id="怎么通过项目管理学习？"><a href="#怎么通过项目管理学习？" class="headerlink" title="怎么通过项目管理学习？"></a>怎么通过项目管理学习？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习究竟是什么？&quot;&gt;&lt;a href=&quot;#学习究竟是什么？&quot; class=&quot;headerlink&quot; title=&quot;学习究竟是什么？&quot;&gt;&lt;/a&gt;学习究竟是什么？&lt;/h2&gt;&lt;h4 id=&quot;刻意练习：&quot;&gt;&lt;a href=&quot;#刻意练习：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Learning Method" scheme="https://hehehuang.github.io/categories/Learning-Method/"/>
    
    
  </entry>
  
  <entry>
    <title>statistics</title>
    <link href="https://hehehuang.github.io/2022/11/27/statistics/"/>
    <id>https://hehehuang.github.io/2022/11/27/statistics/</id>
    <published>2022-11-27T12:15:09.000Z</published>
    <updated>2022-11-27T12:16:43.084Z</updated>
    
    
    
    
    <category term="Math" scheme="https://hehehuang.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>probability theory</title>
    <link href="https://hehehuang.github.io/2022/11/27/probability-theory/"/>
    <id>https://hehehuang.github.io/2022/11/27/probability-theory/</id>
    <published>2022-11-27T12:14:53.000Z</published>
    <updated>2022-11-27T12:16:58.393Z</updated>
    
    
    
    
    <category term="Math" scheme="https://hehehuang.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>linear algebra</title>
    <link href="https://hehehuang.github.io/2022/11/27/linear-algebra/"/>
    <id>https://hehehuang.github.io/2022/11/27/linear-algebra/</id>
    <published>2022-11-27T12:13:39.000Z</published>
    <updated>2022-11-29T11:35:03.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>为什么学这个？</p><p>从哪里学的？</p><p>学完以后可以学什么？</p><p>向量究竟是什么？</p><p>线性组合，张成的空间与基</p><p>矩阵与线性变换</p><p>矩阵乘法与线性变换复合</p><p>三维空间中的线性变换</p><p>行列式</p><p>逆矩阵，列空间与零空间</p><p>非方阵</p><p>电积与对偶性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;为什么学这个？&lt;/p&gt;
&lt;p&gt;从哪里学的？&lt;/p&gt;
&lt;p&gt;学完以后可以学什么？&lt;/p&gt;
&lt;p&gt;向量究竟是什么？&lt;/p&gt;
&lt;p&gt;线性组合，张成</summary>
      
    
    
    
    <category term="Math" scheme="https://hehehuang.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>calculus</title>
    <link href="https://hehehuang.github.io/2022/11/27/calculus/"/>
    <id>https://hehehuang.github.io/2022/11/27/calculus/</id>
    <published>2022-11-27T12:12:49.000Z</published>
    <updated>2022-11-29T11:14:15.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为什么学这个？</p><p>从哪里学的？</p><p>学完以后可以学什么？</p><h2 id="微积分的本质"><a href="#微积分的本质" class="headerlink" title="微积分的本质"></a>微积分的本质</h2><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><h3 id="什么是导数？"><a href="#什么是导数？" class="headerlink" title="什么是导数？"></a>什么是导数？</h3><p>f(x) 在x的导数： 在x点，x的微小变化与y的微小变化之间的关系</p><p>dy&#x2F;dx</p><p>Derivatives are fundamentally about looking at tiny changes to some quantity and how that relates to a resulting tiny change in another quantity.</p><h3 id="怎么求导数？"><a href="#怎么求导数？" class="headerlink" title="怎么求导数？"></a>怎么求导数？</h3><p>y&#x3D;x*x</p><p>y+dy &#x3D; (x+dx)(x+dy)</p><p>求出 dy&#x2F;dx </p><h2 id="几何的角度看导数"><a href="#几何的角度看导数" class="headerlink" title="几何的角度看导数"></a>几何的角度看导数</h2><h4 id="假设x-x-增加了dx，-从图像中怎么看出来？"><a href="#假设x-x-增加了dx，-从图像中怎么看出来？" class="headerlink" title="假设x*x 增加了dx， 从图像中怎么看出来？"></a>假设x*x 增加了dx， 从图像中怎么看出来？</h4><p>怎么求1&#x2F;x的导数？</p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p>sinx cosx </p><p>为什么sinx的导数是cos x？</p><h2 id="链式法则和乘积法则"><a href="#链式法则和乘积法则" class="headerlink" title="链式法则和乘积法则"></a>链式法则和乘积法则</h2><h2 id="指数函数求导"><a href="#指数函数求导" class="headerlink" title="指数函数求导"></a>指数函数求导</h2><h2 id="隐函数求导是怎么回事？"><a href="#隐函数求导是怎么回事？" class="headerlink" title="隐函数求导是怎么回事？"></a>隐函数求导是怎么回事？</h2><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h2 id="积分与微积分基本定理"><a href="#积分与微积分基本定理" class="headerlink" title="积分与微积分基本定理"></a>积分与微积分基本定理</h2><h2 id="面积和斜率有什么联系"><a href="#面积和斜率有什么联系" class="headerlink" title="面积和斜率有什么联系"></a>面积和斜率有什么联系</h2><h2 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;为什么学这个？&lt;/p&gt;
&lt;p&gt;从哪里学的？&lt;/p&gt;
&lt;p&gt;学完以后可以学什么？&lt;/p&gt;
&lt;h2 id=&quot;微积分的本质&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Math" scheme="https://hehehuang.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>ML Introduction</title>
    <link href="https://hehehuang.github.io/2022/11/25/ML-Introduction/"/>
    <id>https://hehehuang.github.io/2022/11/25/ML-Introduction/</id>
    <published>2022-11-25T10:49:46.000Z</published>
    <updated>2022-11-25T10:52:10.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Machine-Learning-流程"><a href="#Machine-Learning-流程" class="headerlink" title="Machine Learning 流程"></a>Machine Learning 流程</h3><p>不同类型的Machine Learning</p><p>Linear Regression</p><p>Logistic Regression</p><p>SVM</p><p>Pertron</p><p>Byies</p><p>Decision Tree</p><p>Random Tree</p><p>Boosting </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Machine-Learning-流程&quot;&gt;&lt;a href=&quot;#Machine-Learning-流程&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning 流程&quot;&gt;&lt;/a&gt;Machine Learning 流程&lt;/h3&gt;&lt;p&gt;不同</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://hehehuang.github.io/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>PythonDataStructure</title>
    <link href="https://hehehuang.github.io/2022/11/23/PythonDataStructure/"/>
    <id>https://hehehuang.github.io/2022/11/23/PythonDataStructure/</id>
    <published>2022-11-23T13:06:49.000Z</published>
    <updated>2022-11-23T13:09:55.478Z</updated>
    
    <content type="html"><![CDATA[<p>Big O</p><p>Linked list</p><p>Double Linked List</p><p>Stack</p><p>Queue</p><p>Tree</p><p>BST</p><p>HashTable</p><p>Graph</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Big O&lt;/p&gt;
&lt;p&gt;Linked list&lt;/p&gt;
&lt;p&gt;Double Linked List&lt;/p&gt;
&lt;p&gt;Stack&lt;/p&gt;
&lt;p&gt;Queue&lt;/p&gt;
&lt;p&gt;Tree&lt;/p&gt;
&lt;p&gt;BST&lt;/p&gt;
&lt;p&gt;HashTable&lt;/p&gt;
&lt;p&gt;Graph&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Advance</title>
    <link href="https://hehehuang.github.io/2022/11/21/Python-Advance/"/>
    <id>https://hehehuang.github.io/2022/11/21/Python-Advance/</id>
    <published>2022-11-21T12:37:24.000Z</published>
    <updated>2022-11-23T13:05:10.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h6 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h6><p>函数中的变量在使用完成后会被销毁。</p><p>闭包可以让你继续使用这个变量</p><h6 id="怎么构成闭包？"><a href="#怎么构成闭包？" class="headerlink" title="怎么构成闭包？"></a>怎么构成闭包？</h6><ol><li>函数嵌套</li><li>内函数使用外函数的变量</li><li>外部函数返回内部函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def outer_func(num1):</span><br><span class="line">def inner_func(num2):</span><br><span class="line">num1 = num1 + num2</span><br><span class="line">  return inner_func</span><br><span class="line">  </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h6 id="闭包的使用场景？"><a href="#闭包的使用场景？" class="headerlink" title="闭包的使用场景？"></a>闭包的使用场景？</h6><h6 id="怎么在闭包内修改外部函数变量？"><a href="#怎么在闭包内修改外部函数变量？" class="headerlink" title="怎么在闭包内修改外部函数变量？"></a>怎么在闭包内修改外部函数变量？</h6><p>nonlocal 关键词，声明外部函数变量</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h3 id="多任务编程"><a href="#多任务编程" class="headerlink" title="多任务编程"></a>多任务编程</h3><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;h6 id=&quot;什么是闭包？&quot;&gt;&lt;a href=&quot;#什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包？&quot;&gt;&lt;/a&gt;什</summary>
      
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Composition</title>
    <link href="https://hehehuang.github.io/2022/11/05/Computer-Composition/"/>
    <id>https://hehehuang.github.io/2022/11/05/Computer-Composition/</id>
    <published>2022-11-05T13:15:20.000Z</published>
    <updated>2022-11-05T17:37:24.330Z</updated>
    
    <content type="html"><![CDATA[<h6 id="计算机硬件系统："><a href="#计算机硬件系统：" class="headerlink" title="计算机硬件系统："></a>计算机硬件系统：</h6><p>运算器+控制器+存储器+输入&#x2F;输出设备   </p><p>中央处理器</p><h6 id="什么是CPU？"><a href="#什么是CPU？" class="headerlink" title="什么是CPU？"></a>什么是CPU？</h6><p>CPU &#x3D; 运算器（数据的加工处理）+控制器（根据程序要求进行控制）</p><p>处理指令：鼠标的点击，键盘的按</p><p>运算数据：1+1 的运算</p><p>存储器：</p><p>内存储器： </p><h6 id="什么是内存？"><a href="#什么是内存？" class="headerlink" title="什么是内存？"></a>什么是内存？</h6><p>内存是临时存储等待CPU处理的数据，读写速度很快。</p><p>在程序运行的时候， 代码是需要在内存开辟空间来储存的。 </p><p>当内存满了以后， 电脑也就卡了。</p><p>所以，数据结构与算法就显得重要了。 </p><p>外存储器：硬盘</p><h6 id="什么是操作系统？"><a href="#什么是操作系统？" class="headerlink" title="什么是操作系统？"></a>什么是操作系统？</h6><p>Windows Mac Unix Linuxs</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;计算机硬件系统：&quot;&gt;&lt;a href=&quot;#计算机硬件系统：&quot; class=&quot;headerlink&quot; title=&quot;计算机硬件系统：&quot;&gt;&lt;/a&gt;计算机硬件系统：&lt;/h6&gt;&lt;p&gt;运算器+控制器+存储器+输入&amp;#x2F;输出设备   &lt;/p&gt;
&lt;p&gt;中央处理器&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Computer Composition" scheme="https://hehehuang.github.io/categories/Computer-Composition/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://hehehuang.github.io/2022/11/03/Linux/"/>
    <id>https://hehehuang.github.io/2022/11/03/Linux/</id>
    <published>2022-11-02T20:12:59.000Z</published>
    <updated>2022-11-04T15:59:17.420Z</updated>
    
    <content type="html"><![CDATA[<p>准备着：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备着：&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Generic C++</title>
    <link href="https://hehehuang.github.io/2022/10/28/Generic-C/"/>
    <id>https://hehehuang.github.io/2022/10/28/Generic-C/</id>
    <published>2022-10-28T10:10:16.000Z</published>
    <updated>2022-10-29T16:57:56.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><h6 id="什么是模版？"><a href="#什么是模版？" class="headerlink" title="什么是模版？"></a>什么是模版？</h6><h4 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h4><h6 id="怎么声明函数模版？"><a href="#怎么声明函数模版？" class="headerlink" title="怎么声明函数模版？"></a>怎么声明函数模版？</h6><p>两种方法</p><h6 id="怎么使用函数模版？"><a href="#怎么使用函数模版？" class="headerlink" title="怎么使用函数模版？"></a>怎么使用函数模版？</h6><h6 id="普通的函数与函数模版有什么区别？"><a href="#普通的函数与函数模版有什么区别？" class="headerlink" title="普通的函数与函数模版有什么区别？"></a>普通的函数与函数模版有什么区别？</h6><p>普通函数发生自动类型转换，（隐式类型转换）</p><p>函数模版，如果是利用自动类型推导，不会发生隐式转换， 如果是显示指定类型的方式，可以发生隐式类型转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunc&lt;int&gt;();</span><br></pre></td></tr></table></figure><h6 id="什么是隐式类型转换？"><a href="#什么是隐式类型转换？" class="headerlink" title="什么是隐式类型转换？"></a>什么是隐式类型转换？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1</span><br><span class="line">char c = &#x27;c&#x27;</span><br><span class="line">cout &lt;&lt; a + c &lt;&lt; endl; //可以得到结果100， char c 会被自动转换成相对应的ASIC码， c-99 </span><br></pre></td></tr></table></figure><p>普通函数与函数模版调用规则是什么？4点</p><ul><li>如果函数模版和普通模版都可以调用， 优先调用函数模版。</li><li>如果想强制性调用函数模版， 可以是用空模版参数列表</li><li>函数模版也可以发生函数重载</li><li>如果函数模版可以产生更好的匹配， 优先调用函数模版</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunc&lt;&gt;(a,b) //空模版参数列表</span><br></pre></td></tr></table></figure><h6 id="模版的局限性是什么？"><a href="#模版的局限性是什么？" class="headerlink" title="模版的局限性是什么？"></a>模版的局限性是什么？</h6><p>比如，传入的是自定义的Person a 与Person b 就无法对比。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt;b) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方式： 具体化 自定义的Person类： 告诉编译器 Person 怎么对比。</p><h4 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h4><h6 id="类模版的作用是什么？"><a href="#类模版的作用是什么？" class="headerlink" title="类模版的作用是什么？"></a>类模版的作用是什么？</h6><p>建立一个通用类，类中的成员数据类型可以不具体制定，而是用一个虚拟的类型来代表。</p><h6 id="类模版的语法是什么？"><a href="#类模版的语法是什么？" class="headerlink" title="类模版的语法是什么？"></a>类模版的语法是什么？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模版与函数模版的区别是什么？</p><ul><li>类模版没有自动类型推导的使用方式</li><li>类模版在模版参数列表中可以有默认参数</li></ul><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h6 id="什么是STL？"><a href="#什么是STL？" class="headerlink" title="什么是STL？"></a>什么是STL？</h6><p>standard template library</p><p>STL 广义上能分成几大部分？</p><p>三大部分：容器（container）算法（algorithm）迭代器（iterator） </p><h6 id="STL-六大组件是什么？"><a href="#STL-六大组件是什么？" class="headerlink" title="STL 六大组件是什么？"></a>STL 六大组件是什么？</h6><p>容器，算法，</p><p>迭代器：算法与容器之间想要有交流必须通过迭代器</p><p>仿函数：行为类似函数</p><p>适配器（配接器）：比如有些算法只接收一个参数，通过适配器， 就可以使之接收多个算法</p><p>空间配置器：负责空间的配置与管理</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h6 id="容器指的是哪些？"><a href="#容器指的是哪些？" class="headerlink" title="容器指的是哪些？"></a>容器指的是哪些？</h6><p>Vector，list，duque, set, map 用来存放数据</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><h6 id="什么是Vector？"><a href="#什么是Vector？" class="headerlink" title="什么是Vector？"></a>什么是Vector？</h6><p>动态数组，可以储存一个能够存放任意类型的动态数组，能够增加和压缩数据。</p><p>vector 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。</p><p>是因为它可以包含其他对象。一个容器中的所有对象都必须是同一种类型的。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><h6 id="什么是String？"><a href="#什么是String？" class="headerlink" title="什么是String？"></a>什么是String？</h6><p>char * 是指针。 String 本质上是一个类，Char* 型的容器</p><p>序列式容器：</p><p>强调值的排序，序列式容器中的每个元素均有固定的位置。</p><p>关联式容器：</p><p>二叉树的结构，各元素之间没有严格上物理上的顺序关系。</p><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><p>质变算法</p><p>运算过程中会改变区间内的元素的内容。如：拷贝，替换，删除</p><p>非质变算法</p><p>运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>提供一种方法，能够依次序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><h3 id="适配器（配接器）"><a href="#适配器（配接器）" class="headerlink" title="适配器（配接器）"></a>适配器（配接器）</h3><h3 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;泛型编程&quot;&gt;&lt;a href=&quot;#泛型编程&quot; class=&quot;headerlink&quot; title=&quot;泛型编程&quot;&gt;&lt;/a&gt;泛型编程&lt;/h2&gt;&lt;h3 id=&quot;模版&quot;&gt;&lt;a href=&quot;#模版&quot; class=&quot;headerlink&quot; title=&quot;模版&quot;&gt;&lt;/a&gt;模版&lt;/h</summary>
      
    
    
    
    <category term="C++" scheme="https://hehehuang.github.io/categories/C/"/>
    
    
    <category term="Generic Programming" scheme="https://hehehuang.github.io/tags/Generic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>FGBA</title>
    <link href="https://hehehuang.github.io/2022/10/27/FGBA/"/>
    <id>https://hehehuang.github.io/2022/10/27/FGBA/</id>
    <published>2022-10-27T13:48:32.000Z</published>
    <updated>2022-10-29T17:18:52.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FGBA"><a href="#FGBA" class="headerlink" title="FGBA"></a>FGBA</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FGBA&quot;&gt;&lt;a href=&quot;#FGBA&quot; class=&quot;headerlink&quot; title=&quot;FGBA&quot;&gt;&lt;/a&gt;FGBA&lt;/h2&gt;</summary>
      
    
    
    
    <category term="FGBA" scheme="https://hehehuang.github.io/categories/FGBA/"/>
    
    
  </entry>
  
</feed>
