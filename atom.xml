<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuangheheTech</title>
  
  
  <link href="https://hehehuang.github.io/atom.xml" rel="self"/>
  
  <link href="https://hehehuang.github.io/"/>
  <updated>2022-11-04T15:59:17.420Z</updated>
  <id>https://hehehuang.github.io/</id>
  
  <author>
    <name>Huang He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux</title>
    <link href="https://hehehuang.github.io/2022/11/03/Linux/"/>
    <id>https://hehehuang.github.io/2022/11/03/Linux/</id>
    <published>2022-11-02T20:12:59.000Z</published>
    <updated>2022-11-04T15:59:17.420Z</updated>
    
    <content type="html"><![CDATA[<p>准备着：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备着：&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hehehuang.github.io/2022/11/03/%E5%90%8D%E5%AD%97%EF%BC%9A%E9%BB%84%E9%B9%A4/"/>
    <id>https://hehehuang.github.io/2022/11/03/%E5%90%8D%E5%AD%97%EF%BC%9A%E9%BB%84%E9%B9%A4/</id>
    <published>2022-11-02T19:51:51.739Z</published>
    <updated>2022-11-02T19:51:51.739Z</updated>
    
    <content type="html"><![CDATA[<p>名字：黄鹤<br>电话：13515963851<br>身份证：35032119900213001X<br>护照号：ED1057901<br>哪个国家回：新加坡<br>国外航班号：MF852<br>石西村住址：莆田市涵江区江口镇石西村石庭西路346号<br>入境日期：2022-10-26<br>入境隔离点：厦门市湖里区殿前街道港中路1551-1589号<br>隔离酒店名称：厦门高崎健康驿站<br>几号隔离到几号：2022-10-26 到2022-11-03<br>隔离期间几次核酸：5次核酸<br>疫苗几针+日期：辉瑞疫苗三针（2021-07-29，2021-08-20，2022-01-13）<br>是否得过新冠病毒：否</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;名字：黄鹤&lt;br&gt;电话：13515963851&lt;br&gt;身份证：35032119900213001X&lt;br&gt;护照号：ED1057901&lt;br&gt;哪个国家回：新加坡&lt;br&gt;国外航班号：MF852&lt;br&gt;石西村住址：莆田市涵江区江口镇石西村石庭西路346号&lt;br&gt;入境日期：2022</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Generic C++</title>
    <link href="https://hehehuang.github.io/2022/10/28/Generic-C/"/>
    <id>https://hehehuang.github.io/2022/10/28/Generic-C/</id>
    <published>2022-10-28T10:10:16.000Z</published>
    <updated>2022-10-29T16:57:56.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><h6 id="什么是模版？"><a href="#什么是模版？" class="headerlink" title="什么是模版？"></a>什么是模版？</h6><h4 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h4><h6 id="怎么声明函数模版？"><a href="#怎么声明函数模版？" class="headerlink" title="怎么声明函数模版？"></a>怎么声明函数模版？</h6><p>两种方法</p><h6 id="怎么使用函数模版？"><a href="#怎么使用函数模版？" class="headerlink" title="怎么使用函数模版？"></a>怎么使用函数模版？</h6><h6 id="普通的函数与函数模版有什么区别？"><a href="#普通的函数与函数模版有什么区别？" class="headerlink" title="普通的函数与函数模版有什么区别？"></a>普通的函数与函数模版有什么区别？</h6><p>普通函数发生自动类型转换，（隐式类型转换）</p><p>函数模版，如果是利用自动类型推导，不会发生隐式转换， 如果是显示指定类型的方式，可以发生隐式类型转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunc&lt;int&gt;();</span><br></pre></td></tr></table></figure><h6 id="什么是隐式类型转换？"><a href="#什么是隐式类型转换？" class="headerlink" title="什么是隐式类型转换？"></a>什么是隐式类型转换？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1</span><br><span class="line">char c = &#x27;c&#x27;</span><br><span class="line">cout &lt;&lt; a + c &lt;&lt; endl; //可以得到结果100， char c 会被自动转换成相对应的ASIC码， c-99 </span><br></pre></td></tr></table></figure><p>普通函数与函数模版调用规则是什么？4点</p><ul><li>如果函数模版和普通模版都可以调用， 优先调用函数模版。</li><li>如果想强制性调用函数模版， 可以是用空模版参数列表</li><li>函数模版也可以发生函数重载</li><li>如果函数模版可以产生更好的匹配， 优先调用函数模版</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunc&lt;&gt;(a,b) //空模版参数列表</span><br></pre></td></tr></table></figure><h6 id="模版的局限性是什么？"><a href="#模版的局限性是什么？" class="headerlink" title="模版的局限性是什么？"></a>模版的局限性是什么？</h6><p>比如，传入的是自定义的Person a 与Person b 就无法对比。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt;b) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方式： 具体化 自定义的Person类： 告诉编译器 Person 怎么对比。</p><h4 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h4><h6 id="类模版的作用是什么？"><a href="#类模版的作用是什么？" class="headerlink" title="类模版的作用是什么？"></a>类模版的作用是什么？</h6><p>建立一个通用类，类中的成员数据类型可以不具体制定，而是用一个虚拟的类型来代表。</p><h6 id="类模版的语法是什么？"><a href="#类模版的语法是什么？" class="headerlink" title="类模版的语法是什么？"></a>类模版的语法是什么？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模版与函数模版的区别是什么？</p><ul><li>类模版没有自动类型推导的使用方式</li><li>类模版在模版参数列表中可以有默认参数</li></ul><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h6 id="什么是STL？"><a href="#什么是STL？" class="headerlink" title="什么是STL？"></a>什么是STL？</h6><p>standard template library</p><p>STL 广义上能分成几大部分？</p><p>三大部分：容器（container）算法（algorithm）迭代器（iterator） </p><h6 id="STL-六大组件是什么？"><a href="#STL-六大组件是什么？" class="headerlink" title="STL 六大组件是什么？"></a>STL 六大组件是什么？</h6><p>容器，算法，</p><p>迭代器：算法与容器之间想要有交流必须通过迭代器</p><p>仿函数：行为类似函数</p><p>适配器（配接器）：比如有些算法只接收一个参数，通过适配器， 就可以使之接收多个算法</p><p>空间配置器：负责空间的配置与管理</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h6 id="容器指的是哪些？"><a href="#容器指的是哪些？" class="headerlink" title="容器指的是哪些？"></a>容器指的是哪些？</h6><p>Vector，list，duque, set, map 用来存放数据</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><h6 id="什么是Vector？"><a href="#什么是Vector？" class="headerlink" title="什么是Vector？"></a>什么是Vector？</h6><p>动态数组，可以储存一个能够存放任意类型的动态数组，能够增加和压缩数据。</p><p>vector 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。</p><p>是因为它可以包含其他对象。一个容器中的所有对象都必须是同一种类型的。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><h6 id="什么是String？"><a href="#什么是String？" class="headerlink" title="什么是String？"></a>什么是String？</h6><p>char * 是指针。 String 本质上是一个类，Char* 型的容器</p><p>序列式容器：</p><p>强调值的排序，序列式容器中的每个元素均有固定的位置。</p><p>关联式容器：</p><p>二叉树的结构，各元素之间没有严格上物理上的顺序关系。</p><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><p>质变算法</p><p>运算过程中会改变区间内的元素的内容。如：拷贝，替换，删除</p><p>非质变算法</p><p>运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>提供一种方法，能够依次序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><h3 id="适配器（配接器）"><a href="#适配器（配接器）" class="headerlink" title="适配器（配接器）"></a>适配器（配接器）</h3><h3 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;泛型编程&quot;&gt;&lt;a href=&quot;#泛型编程&quot; class=&quot;headerlink&quot; title=&quot;泛型编程&quot;&gt;&lt;/a&gt;泛型编程&lt;/h2&gt;&lt;h3 id=&quot;模版&quot;&gt;&lt;a href=&quot;#模版&quot; class=&quot;headerlink&quot; title=&quot;模版&quot;&gt;&lt;/a&gt;模版&lt;/h</summary>
      
    
    
    
    <category term="C++" scheme="https://hehehuang.github.io/categories/C/"/>
    
    
    <category term="Generic Programming" scheme="https://hehehuang.github.io/tags/Generic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>FGBA</title>
    <link href="https://hehehuang.github.io/2022/10/27/FGBA/"/>
    <id>https://hehehuang.github.io/2022/10/27/FGBA/</id>
    <published>2022-10-27T13:48:32.000Z</published>
    <updated>2022-10-29T17:18:52.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FGBA"><a href="#FGBA" class="headerlink" title="FGBA"></a>FGBA</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FGBA&quot;&gt;&lt;a href=&quot;#FGBA&quot; class=&quot;headerlink&quot; title=&quot;FGBA&quot;&gt;&lt;/a&gt;FGBA&lt;/h2&gt;</summary>
      
    
    
    
    <category term="FGBA" scheme="https://hehehuang.github.io/categories/FGBA/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ Basic</title>
    <link href="https://hehehuang.github.io/2022/10/23/C-Basic/"/>
    <id>https://hehehuang.github.io/2022/10/23/C-Basic/</id>
    <published>2022-10-23T08:57:04.000Z</published>
    <updated>2022-10-29T16:35:32.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-基础："><a href="#C-基础：" class="headerlink" title="C++ 基础："></a>C++ 基础：</h2><p>函数：</p><h6 id="什么是函数分文件？为什么要分文件编写？"><a href="#什么是函数分文件？为什么要分文件编写？" class="headerlink" title="什么是函数分文件？为什么要分文件编写？"></a>什么是函数分文件？为什么要分文件编写？</h6><p>让代码结构更加清晰，在头文件中写函数的声明，在源文件中写函数的定义。</p><p>指针：</p><h6 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h6><p>内存编号是从0开始的，一般用十六进制数字表示</p><p>可以利用指针变量保存地址。</p><h6 id="指针的作用是什么？"><a href="#指针的作用是什么？" class="headerlink" title="指针的作用是什么？"></a>指针的作用是什么？</h6><p>可以通过指针间接的访问内存</p><h6 id="指针怎么通过保存的地址，拿到对应的值？"><a href="#指针怎么通过保存的地址，拿到对应的值？" class="headerlink" title="指针怎么通过保存的地址，拿到对应的值？"></a>指针怎么通过保存的地址，拿到对应的值？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义指针</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 数据类型 * 指针变量名</span></span><br><span class="line"><span class="type">int</span> * p;</span><br><span class="line"><span class="comment">//让指针记录变量a的地址</span></span><br><span class="line">p = &amp;a;  <span class="comment">//&amp;取址符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过解引用的方式来找到 指针指向的内存</span></span><br><span class="line">*p </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="指针也是数据类型，那么它占用多少内存空间？"><a href="#指针也是数据类型，那么它占用多少内存空间？" class="headerlink" title="指针也是数据类型，那么它占用多少内存空间？"></a>指针也是数据类型，那么它占用多少内存空间？</h6><p>4 字节， 在32位操作系统下。8个字节，在64位操作系统下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sizeof(int *);</span><br><span class="line">sizeof(char *);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="什么是空指针？"><a href="#什么是空指针？" class="headerlink" title="什么是空指针？"></a>什么是空指针？</h6><p>指针变量指向了编号为0的空间。</p><p>用途： 初始化指针变量。</p><p>空指针指向的内存不可访问， 内存编号0～255 是系统占用内存，用户访问不了</p><h6 id="什么是野指针？"><a href="#什么是野指针？" class="headerlink" title="什么是野指针？"></a>什么是野指针？</h6><p>指针变量指向了非法的内存空间。</p><h6 id="什么是const修饰指针？"><a href="#什么是const修饰指针？" class="headerlink" title="什么是const修饰指针？"></a>什么是const修饰指针？</h6><p>常量指针</p><p>特点：指针的指向可以修改，但是指针指向的值不可以改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * p = &amp;a; <span class="comment">//常量指针</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指针常量</p><p>特点： 指针的指向不可以改，但指针指向的值可以改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><p>const 即修饰指针，又修饰常量</p><p>特点：指针的指向跟指针指向的值都不可以改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><h6 id="怎么利用指针来访问数组？"><a href="#怎么利用指针来访问数组？" class="headerlink" title="怎么利用指针来访问数组？"></a>怎么利用指针来访问数组？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int arr[3] = &#123;1,2,3&#125;;</span><br><span class="line">int * p = arr; //arr 是数组第一个元素的首地址</span><br><span class="line">p++； //指针向后偏移了4个字节</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么利用指针作为函数的参数来修改实参的值？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void swap(int *p1, int *p2)&#123;</span><br><span class="line">  int temp = *p;</span><br><span class="line">  *p1 = *p2;</span><br><span class="line">  *p2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内存模型："><a href="#内存模型：" class="headerlink" title="内存模型："></a>内存模型：</h4><h6 id="内存在C-程序在执行时，-都分成了那几个区域？"><a href="#内存在C-程序在执行时，-都分成了那几个区域？" class="headerlink" title="内存在C++程序在执行时， 都分成了那几个区域？"></a>内存在C++程序在执行时， 都分成了那几个区域？</h6><p>代码区，存放函数体的二进制代码</p><p>全局区，存放全局变量和静态变量以及常量</p><p>栈区，有编译器自动分配释放，存放函数的参数值，局部变量</p><p>堆区： 由程序员分配和释放， 若程序员不释放， 程序结束，由操作系统回收</p><h6 id="new-操作符是什么？"><a href="#new-操作符是什么？" class="headerlink" title="new 操作符是什么？"></a>new 操作符是什么？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//利用new创建的数据，会返回该数据对应的类型的指针</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数指针：</p><p> 如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，这段存储空间的首地址称为这个函数的地址。而且函数名表示的就是这个地址。既然是地址我们就可以定义一个指针变量来存放，这个指针变量就叫作函数指针变量，简称函数指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>&#123;...&#125; <span class="comment">//这个函数返回 指针</span></span><br><span class="line"><span class="type">int</span> （*func1）(<span class="type">int</span> ,<span class="type">int</span>) &#123; ...&#125; <span class="comment">// 这个是函数指针</span></span><br></pre></td></tr></table></figure><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><h6 id="什么是引用？"><a href="#什么是引用？" class="headerlink" title="什么是引用？"></a>什么是引用？</h6><p>给变量起别名。</p><p>引用必须初始化， 引用在初始化后，不可以改变。</p><p>引用的本质是指针常量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; <span class="comment">//引用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = &amp;a; <span class="comment">//指针</span></span><br></pre></td></tr></table></figure><h6 id="引用，值传递，地址传递-之间的区别是什么？"><a href="#引用，值传递，地址传递-之间的区别是什么？" class="headerlink" title="引用，值传递，地址传递 之间的区别是什么？"></a>引用，值传递，地址传递 之间的区别是什么？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> <span class="comment">//这里的形参的a 就是实参的a， 别名跟原名可以是一样的。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mySwap03</span>(a,b) </span><br></pre></td></tr></table></figure><p>引用做函数返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-面向对象："><a href="#C-面向对象：" class="headerlink" title="C++面向对象："></a>C++面向对象：</h2><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><blockquote><p>将属性和行为结合在一起模拟事物， 还设置了访问权限。</p></blockquote><p>访问权限：public， protected，private </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    string name</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string Name)</span></span>&#123;</span><br><span class="line">      name = Name;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Name&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Person p1;</span><br><span class="line">  p1.<span class="built_in">setName</span>(<span class="string">&quot;HH&quot;</span>);</span><br><span class="line">  p1.<span class="built_in">showName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的初始化和清理："><a href="#对象的初始化和清理：" class="headerlink" title="对象的初始化和清理："></a>对象的初始化和清理：</h3><p>为什么有： 安全温习</p><h4 id="析构函数（）："><a href="#析构函数（）：" class="headerlink" title="析构函数（）："></a>析构函数（）：</h4><blockquote><p>消除对象</p></blockquote><h4 id="构造函数（）："><a href="#构造函数（）：" class="headerlink" title="构造函数（）："></a>构造函数（）：</h4><blockquote><p>构造初始属性，创建对象时，为对象成员属性赋值，比如工厂里面的出场设置。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="built_in">Person</span>()&#123;&#125; </span><br><span class="line">  ~<span class="built_in">Person</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数来划分：</p><p>有参构造函数</p><p>无参构造函数</p><p>类型来划分：</p><p>普通构造</p><p>拷贝构造:</p><p>拷贝构造函数调用时机：</p><ol><li><p>使用一个已经创建完毕的对象来初始化一个新对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = Person(10);</span><br><span class="line">Person p2 = p1;</span><br></pre></td></tr></table></figure></li><li><p>值传递的方式给函数参数传值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void doWork(p)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">doWork(p); //此处的p， 并不是上面的p对象， 而是拷贝函数构造的一个副本。 值传递的本质就是复制出一个副本。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>值方式返回局部对象</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方法</span><br><span class="line">Person doWork2()&#123;</span><br><span class="line">Person p1; //匿名对象</span><br><span class="line">return p1; // return 的并不是 p1 的匿名对象， 而是一个副本。 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：</p><p>括号法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//无参构造</span><br><span class="line">//有参构造</span><br><span class="line">//拷贝构造</span><br></pre></td></tr></table></figure><p><strong>Notice：调用默认构造函数时候，不要加（）</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为什么不要加（）</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">()</span></span>; <span class="comment">//编译器会以为这是一个函数声明。 创造一个 函数名为p1，返回Person类型的函数，不会认为是创建对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>; </span><br></pre></td></tr></table></figure><p>显示法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1;</span><br><span class="line">Person p2 = Person（<span class="number">10</span>）;<span class="comment">// 单看 Person（10） 是匿名对象。后将匿名对象赋予person p2</span></span><br><span class="line">Person（<span class="number">10</span>）;<span class="comment">//这行代码一执行完， 匿名对象就会被清除 </span></span><br></pre></td></tr></table></figure><p>隐式转换法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p4 = 10;</span><br><span class="line">Person p4 = Person(10); </span><br><span class="line">Person p5 = p4;</span><br><span class="line">Person p5 = Person(p4);</span><br></pre></td></tr></table></figure><h5 id="构造函数的调用规则："><a href="#构造函数的调用规则：" class="headerlink" title="构造函数的调用规则："></a>构造函数的调用规则：</h5><h6 id="默认情况下，创造一个类，-C-编译器会至少给你添加哪三个函数？"><a href="#默认情况下，创造一个类，-C-编译器会至少给你添加哪三个函数？" class="headerlink" title="默认情况下，创造一个类， C++编译器会至少给你添加哪三个函数？"></a>默认情况下，创造一个类， C++编译器会至少给你添加哪三个函数？</h6><p>调用规则：</p><h6 id="如果用户自定义了有参数构造函数，会发生什么？"><a href="#如果用户自定义了有参数构造函数，会发生什么？" class="headerlink" title="如果用户自定义了有参数构造函数，会发生什么？"></a>如果用户自定义了有参数构造函数，会发生什么？</h6><h6 id="如果用户自定义了拷贝构造函数，会发生什么？"><a href="#如果用户自定义了拷贝构造函数，会发生什么？" class="headerlink" title="如果用户自定义了拷贝构造函数，会发生什么？"></a>如果用户自定义了拷贝构造函数，会发生什么？</h6><h5 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h5><h6 id="什么是深拷贝？"><a href="#什么是深拷贝？" class="headerlink" title="什么是深拷贝？"></a>什么是深拷贝？</h6><h6 id="什么是浅拷贝？"><a href="#什么是浅拷贝？" class="headerlink" title="什么是浅拷贝？"></a>什么是浅拷贝？</h6><h5 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h5><h6 id="初始化列表有什么作用？"><a href="#初始化列表有什么作用？" class="headerlink" title="初始化列表有什么作用？"></a>初始化列表有什么作用？</h6><h6 id="初始化列表的语法？"><a href="#初始化列表的语法？" class="headerlink" title="初始化列表的语法？"></a>初始化列表的语法？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//传统的初始化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用初始化列表</span><br><span class="line"></span><br><span class="line">Person():m_a(10),m_b(20),m_c(30)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(int a, int b ,int c):m_a(a),m_b(b),m_c(c)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h5><h6 id="什么是对象成员？"><a href="#什么是对象成员？" class="headerlink" title="什么是对象成员？"></a>什么是对象成员？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h6 id="当B类中有A类的对象时，在创建B类对象时，-构造函数与析构函数分别是怎么调用的？"><a href="#当B类中有A类的对象时，在创建B类对象时，-构造函数与析构函数分别是怎么调用的？" class="headerlink" title="当B类中有A类的对象时，在创建B类对象时， 构造函数与析构函数分别是怎么调用的？"></a>当B类中有A类的对象时，在创建B类对象时， 构造函数与析构函数分别是怎么调用的？</h6><p>先构造A类对象，再构造B类对象</p><p>先析构B类对象，再析构A类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br></pre></td></tr></table></figure><h5 id="静态成员："><a href="#静态成员：" class="headerlink" title="静态成员："></a>静态成员：</h5><h6 id="静态成员的作用？"><a href="#静态成员的作用？" class="headerlink" title="静态成员的作用？"></a>静态成员的作用？</h6><h6 id="静态成员变量有什么特点？"><a href="#静态成员变量有什么特点？" class="headerlink" title="静态成员变量有什么特点？"></a>静态成员变量有什么特点？</h6><h6 id="静态成员函数有什么特点？"><a href="#静态成员函数有什么特点？" class="headerlink" title="静态成员函数有什么特点？"></a>静态成员函数有什么特点？</h6><h6 id="有哪两种调用静态成员函数的方式？"><a href="#有哪两种调用静态成员函数的方式？" class="headerlink" title="有哪两种调用静态成员函数的方式？"></a>有哪两种调用静态成员函数的方式？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-对象模型和this指针："><a href="#C-对象模型和this指针：" class="headerlink" title="C++ 对象模型和this指针："></a>C++ 对象模型和this指针：</h3><h4 id="成员变量和成员函数"><a href="#成员变量和成员函数" class="headerlink" title="成员变量和成员函数"></a>成员变量和成员函数</h4><h6 id="在C-中，类内的成员变量和成员函数怎么分开存储？"><a href="#在C-中，类内的成员变量和成员函数怎么分开存储？" class="headerlink" title="在C++中，类内的成员变量和成员函数怎么分开存储？"></a>在C++中，类内的成员变量和成员函数怎么分开存储？</h6><p>空对象占体格内存空间：1 它有着一个独一无二的内存地址</p><p>静态成员变量或者函数， 都不属于类对象上</p><p>非静态成员变量属于类的对象上。</p><p>非静态成员函数不属于类的对象上， 每一个非静态成员的都只会诞生一份函数实例， 也就是说 多个同类型的对象会共用同一块代码。</p><h6 id="怎么区分是哪个对象调用了自己？"><a href="#怎么区分是哪个对象调用了自己？" class="headerlink" title="怎么区分是哪个对象调用了自己？"></a>怎么区分是哪个对象调用了自己？</h6><p>this 指针：指向 被调用的成员函数所属的对象</p><p>this 指针的用途是什么？</p><ul><li>当形参和成员变量同名时，可用this 指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><h3 id="友元："><a href="#友元：" class="headerlink" title="友元："></a>友元：</h3><h6 id="友元的目的是什么？"><a href="#友元的目的是什么？" class="headerlink" title="友元的目的是什么？"></a>友元的目的是什么？</h6><p>让一个函数或者类访问另一个类中私有成员</p><h3 id="运算符重载："><a href="#运算符重载：" class="headerlink" title="运算符重载："></a>运算符重载：</h3><h6 id="运算符重载的作用？"><a href="#运算符重载的作用？" class="headerlink" title="运算符重载的作用？"></a>运算符重载的作用？</h6><p>对于内置数据类型，编译器知道如何运算。 </p><p>但自定义数据类型，编译器就不知道怎么运算了。</p><p>加号运算符重载：</p><p>operator+ : 编译器给了一个通用名</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>拥有上一级的共性，还有自己的特性。</p><h6 id="继承的基本语法："><a href="#继承的基本语法：" class="headerlink" title="继承的基本语法："></a>继承的基本语法：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">derived</span>-<span class="keyword">class</span>: access-specifier base-<span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>自身场景的应用：</p><p>网页中， 公共的头部，公共的底部，只有中心内容不一样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasedPage</span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> : <span class="keyword">public</span> BasedPage&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span>: <span class="keyword">public</span> BasedPage&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="有哪三种继承方式？"><a href="#有哪三种继承方式？" class="headerlink" title="有哪三种继承方式？"></a>有哪三种继承方式？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h6 id="从父类继承过来的成员，哪些属于子类对象中的？"><a href="#从父类继承过来的成员，哪些属于子类对象中的？" class="headerlink" title="从父类继承过来的成员，哪些属于子类对象中的？"></a>从父类继承过来的成员，哪些属于子类对象中的？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>子类继承父类后，当创建子类对象是，会调用父类的构造函数。</p><h6 id="子类父类的构造函数的顺序是？"><a href="#子类父类的构造函数的顺序是？" class="headerlink" title="子类父类的构造函数的顺序是？"></a>子类父类的构造函数的顺序是？</h6><p>先Base构造函数，在Son构造函数， 后Son析构函数，再base的析构函数</p><h6 id="当父类与子类有同名成员，怎么通过子类对象，来访问子类或者父类的数据？"><a href="#当父类与子类有同名成员，怎么通过子类对象，来访问子类或者父类的数据？" class="headerlink" title="当父类与子类有同名成员，怎么通过子类对象，来访问子类或者父类的数据？"></a>当父类与子类有同名成员，怎么通过子类对象，来访问子类或者父类的数据？</h6><p>子类同名成员，直接访问</p><p>父类同名成员，加作用域</p><p>Notice：<strong>如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类所有同名成员函数，如果想要访问父类的同名成员，需要加上作用域</strong></p><p>静态成员同名</p><p>多继承</p><p>菱形继承</p><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><p>多态的基本概念：</p><p>子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现</p><p>什么是对象切割？ </p><p>多态的底层原理是什么？ </p><p>纯虚函数和抽象类</p><h6 id="纯虚函数的作用是什么？"><a href="#纯虚函数的作用是什么？" class="headerlink" title="纯虚函数的作用是什么？"></a>纯虚函数的作用是什么？</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h6 id="什么是抽象类？"><a href="#什么是抽象类？" class="headerlink" title="什么是抽象类？"></a>什么是抽象类？</h6><h6 id="抽象类有什么特点？"><a href="#抽象类有什么特点？" class="headerlink" title="抽象类有什么特点？"></a>抽象类有什么特点？</h6><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p>虚析构和纯虚析构</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-基础：&quot;&gt;&lt;a href=&quot;#C-基础：&quot; class=&quot;headerlink&quot; title=&quot;C++ 基础：&quot;&gt;&lt;/a&gt;C++ 基础：&lt;/h2&gt;&lt;p&gt;函数：&lt;/p&gt;
&lt;h6 id=&quot;什么是函数分文件？为什么要分文件编写？&quot;&gt;&lt;a href=&quot;#什么是函数分文</summary>
      
    
    
    
    <category term="C++" scheme="https://hehehuang.github.io/categories/C/"/>
    
    
    <category term="OOP" scheme="https://hehehuang.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Recommender System</title>
    <link href="https://hehehuang.github.io/2022/09/29/Recommender-System/"/>
    <id>https://hehehuang.github.io/2022/09/29/Recommender-System/</id>
    <published>2022-09-29T12:38:48.000Z</published>
    <updated>2022-09-29T12:39:42.839Z</updated>
    
    
    
    
    <category term="Big Data" scheme="https://hehehuang.github.io/categories/Big-Data/"/>
    
    
    <category term="PySpark" scheme="https://hehehuang.github.io/tags/PySpark/"/>
    
  </entry>
  
  <entry>
    <title>Data Science</title>
    <link href="https://hehehuang.github.io/2022/09/29/Data-Science/"/>
    <id>https://hehehuang.github.io/2022/09/29/Data-Science/</id>
    <published>2022-09-28T19:10:26.000Z</published>
    <updated>2022-10-14T18:22:57.274Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Statistics</p><ul><li>Descriptive Statistic<ul><li>Visualization of data</li></ul></li><li>Inferential Statistics<ul><li>One sample test of difference&#x2F;One sample hypothesis test.</li><li>Confidence Interval</li><li>Contingency Tables and Chi Square Statistic</li><li>T-test or Anova</li><li>Pearson Correlation</li><li>Bi-variate Regression</li><li>Multi-variate Regression</li></ul></li></ul></li><li><p>Probability</p><ul><li><p>Random variable</p></li><li><p>Discrete variable </p></li><li><p>Continous variable</p></li></ul></li><li><h2 id="Line-Algebra"><a href="#Line-Algebra" class="headerlink" title="Line Algebra"></a>Line Algebra</h2></li><li><p>Calculus</p></li><li><p>Optimization</p><ul><li>Gradient descent</li></ul></li><li><p>Python</p><ul><li>Python Basic</li><li>Python Advance</li><li>Algorithm</li><li>Visualization</li></ul></li><li><p>Web Scraping</p></li><li><p>Machine Learning</p><ul><li><p>Superivor Learning</p><ul><li><p>Regression</p></li><li><p>Classification</p></li></ul></li><li><p>Unsuperivor Learning</p><ul><li>Clusting</li></ul></li></ul></li><li><p>Deep Learning</p><ul><li>DNN</li><li>CNN</li></ul></li><li><p>NLP</p></li><li><p>Computer Vision</p></li><li><p>Data Mining</p><ul><li>Network Analysis</li><li>Recommender System</li></ul></li><li><p>Big Data </p><ul><li>Batching Processing<ul><li>Hadoop</li><li>Spark</li><li>Hive</li><li>Kafka</li><li>Flink</li><li>Reids</li></ul></li><li>Stream Processing</li></ul></li><li><p>SQL</p><ul><li>Relation SQL</li><li>NOSQL</li></ul></li><li><p>AWS</p></li><li><p>Docker &amp; K8s </p></li><li><p>Python GUI</p></li><li><p>Web Development</p></li><li><p>fundatmetals</p></li><li><p>statistics</p></li><li><p>programming</p></li><li><p>machine learning</p></li><li><p>text ming&#x2F;nlp</p></li><li></li><li><p>big data</p></li><li><p>data ingestion</p></li><li><p>data munging</p></li><li><p>Tool box</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Statistics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descriptive Statistic&lt;ul&gt;
&lt;li&gt;Visualization of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inferential Statistics&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spark ML Case</title>
    <link href="https://hehehuang.github.io/2022/09/26/Spark-ML-Case/"/>
    <id>https://hehehuang.github.io/2022/09/26/Spark-ML-Case/</id>
    <published>2022-09-26T09:21:53.000Z</published>
    <updated>2022-09-26T09:21:53.804Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>NLP for DeepLearning</title>
    <link href="https://hehehuang.github.io/2022/09/24/NLP-for-DeepLearning/"/>
    <id>https://hehehuang.github.io/2022/09/24/NLP-for-DeepLearning/</id>
    <published>2022-09-24T10:29:33.000Z</published>
    <updated>2022-10-14T18:17:53.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNN"><a href="#DNN" class="headerlink" title="DNN"></a>DNN</h3><p>CNN</p><p>RNN</p><p>LSTM</p><p>Sequence to Sequence</p><p>BERT</p><p>1. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;DNN&quot;&gt;&lt;a href=&quot;#DNN&quot; class=&quot;headerlink&quot; title=&quot;DNN&quot;&gt;&lt;/a&gt;DNN&lt;/h3&gt;&lt;p&gt;CNN&lt;/p&gt;
&lt;p&gt;RNN&lt;/p&gt;
&lt;p&gt;LSTM&lt;/p&gt;
&lt;p&gt;Sequence to Sequence&lt;/p&gt;
&lt;p&gt;BERT</summary>
      
    
    
    
    <category term="NLP" scheme="https://hehehuang.github.io/categories/NLP/"/>
    
    
    <category term="Deep Learning" scheme="https://hehehuang.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>English Weekly Plan</title>
    <link href="https://hehehuang.github.io/2022/09/24/English-Weekly-Plan/"/>
    <id>https://hehehuang.github.io/2022/09/24/English-Weekly-Plan/</id>
    <published>2022-09-24T09:45:12.000Z</published>
    <updated>2022-09-30T12:05:06.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="THINGS-YOU-WILL-NEED"><a href="#THINGS-YOU-WILL-NEED" class="headerlink" title="THINGS YOU WILL NEED:"></a>THINGS YOU WILL NEED:</h4><ul><li>1 hour per day (30 minutes will work as well).</li><li>a notebook and a pen to write down new vocabulary each day.</li><li>an English song.</li><li>an English a book.</li><li>an English TV show.</li></ul><h4 id="MONDAYS"><a href="#MONDAYS" class="headerlink" title="MONDAYS"></a>MONDAYS</h4><p>(Spend 30-40 minutes Reading)</p><ul><li>Read your book.</li><li>Read the news.</li><li>Read an article on <a href="http://simple.wikipedia.com/">http://simple.wikipedia.com</a></li><li>Write down some new words in your notebook with their definition.</li><li>Spend the rest of your hour:<br> – Reading out loud from your book<br> – Writing out some passages from your book.<br> – Listening to the audiobook of your book.<br> – Using Duolingo or other learning apps.</li></ul><h4 id="TUESDAYS"><a href="#TUESDAYS" class="headerlink" title="TUESDAYS"></a>TUESDAYS</h4><p>(Spend 30-40 minutes Writing)</p><ul><li>Write what you did yesterday, today, and tomorrow in your notebook.</li><li>Write a few comments on Youtube videos.</li><li>Write some sentences about what you like and dislike about your song, your book, and your TV show.</li><li>Write a summary of what you have read in your book the day before.</li><li>Put some new words in your dictionary.</li><li>Spend the rest of your hour:<br> – Reading what you have written.<br> – Listening to what you have written by pasting your writing into Google translate and have it read it to you.<br> – Reading what you have written out loud.<br> – Using Duolingo or other learning apps.</li></ul><h4 id="WEDNESDAYS"><a href="#WEDNESDAYS" class="headerlink" title="WEDNESDAYS"></a>WEDNESDAYS</h4><p>(Spend 30-40 minutes Listening):</p><ul><li>Watch your TV show.</li><li>Listen to your song.</li><li>Listen to the Audiobook of your book if you have it.</li><li>Watch a few Youtube videos.</li><li>Put new words in your dictionary.</li><li>Spend the rest of your hour:<br> – Read about your TV show.<br> – Write about how your song makes you feel.<br> – Mimic or shadow people from your TV show.<br> – Sing along to your song.</li></ul><h4 id="THURSDAYS"><a href="#THURSDAYS" class="headerlink" title="THURSDAYS"></a>THURSDAYS</h4><p>(Spend 30-40 minutes Speaking):</p><ul><li>Hire a tutor on:<br> – Preply: <a href="http://tracking.preply.com/SH2X">http://tracking.preply.com/SH2X</a><br> – Cambly: <a href="http://cambly.com/">http://cambly.com</a><br> – iTalki: <a href="http://italki.com/">http://italki.com</a></li><li>Talk out loud.</li><li>Narrate your life.</li><li>Record yourself and play it back.</li><li>Put words in your dictionary.</li><li>Spend the rest of your hour:<br> – Reading out loud.<br> – Singing out loud.<br> – Shadowing or mimicking actors from your TV show.</li></ul><h4 id="FRIDAYS"><a href="#FRIDAYS" class="headerlink" title="FRIDAYS"></a>FRIDAYS</h4><p>(Spend the Entire hour on Vocabulary):</p><ul><li>Review all the words in your dictionary.</li><li>Write them out.</li><li>Say them out loud.</li><li>Use them in a sentence.</li><li>Make a <a href="http://quizlet.com/">http://quizlet.com</a> set.</li><li>Make flashcards.</li><li>Work until you have them all memorized.</li></ul><h4 id="WEEKENDS"><a href="#WEEKENDS" class="headerlink" title="WEEKENDS:"></a>WEEKENDS:</h4><ul><li>Find a new song.</li><li>Find a new book.</li><li>Find a new TV show.</li><li>Take a break.</li></ul><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><p><a href="https://www.youtube.com/watch?v=5-T6Xqlh6BU&amp;t=283s">https://www.youtube.com/watch?v=5-T6Xqlh6BU&amp;t=283s</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;THINGS-YOU-WILL-NEED&quot;&gt;&lt;a href=&quot;#THINGS-YOU-WILL-NEED&quot; class=&quot;headerlink&quot; title=&quot;THINGS YOU WILL NEED:&quot;&gt;&lt;/a&gt;THINGS YOU WILL NEED:&lt;/h4</summary>
      
    
    
    
    <category term="English" scheme="https://hehehuang.github.io/categories/English/"/>
    
    
  </entry>
  
  <entry>
    <title>Write an article</title>
    <link href="https://hehehuang.github.io/2022/09/24/Write-an-artical/"/>
    <id>https://hehehuang.github.io/2022/09/24/Write-an-artical/</id>
    <published>2022-09-24T08:56:07.000Z</published>
    <updated>2022-09-24T09:43:02.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Five-step-to-write-an-article"><a href="#Five-step-to-write-an-article" class="headerlink" title="Five step to write an article"></a>Five step to write an article</h1><h2 id="1-Ask-a-question"><a href="#1-Ask-a-question" class="headerlink" title="1. Ask a question"></a>1. Ask a question</h2><h2 id="2-Write-a-thesis-statement-answer-the-question"><a href="#2-Write-a-thesis-statement-answer-the-question" class="headerlink" title="2. Write a thesis statement (answer the question)"></a>2. Write a thesis statement (answer the question)</h2><h2 id="3-Write-an-introduction"><a href="#3-Write-an-introduction" class="headerlink" title="3. Write an introduction"></a>3. Write an introduction</h2><h3 id="How-to-write-an-introduction"><a href="#How-to-write-an-introduction" class="headerlink" title="How to write an introduction"></a>How to write an introduction</h3><ol><li><p>Grabbers (attention)</p><ul><li>Joke</li><li>Proverb&#x2F;quote</li><li>anecdote </li><li>surprising fact</li><li>curiosity(?)</li></ul></li><li><p>Topic(subject)  -what </p><ul><li>reasons(or main ideas) (3)</li></ul></li><li><p>Thesis -argument</p><ul><li>whether the topic is negative and positive </li><li>5w1h</li></ul></li></ol><h2 id="4-Prove-your-thesis"><a href="#4-Prove-your-thesis" class="headerlink" title="4. Prove your thesis"></a>4. Prove your thesis</h2><p>Essay Body (Structure)</p><h3 id="How-to-write-an-paragraph"><a href="#How-to-write-an-paragraph" class="headerlink" title="How to write an paragraph"></a>How to write an paragraph</h3><ol><li><p>Topic sentence &amp; Closing sentence</p><ul><li>identifies the topic</li><li>states what will be said about the topic</li></ul></li><li><p>Specific details &amp; supporting facts</p><ul><li>Specific details &amp; supporting faccts （for example: Facts, example from a source)</li></ul></li><li><p>Your thinking about the facts</p><ul><li>your own thoughts about the details &amp; facts (analogy, analysis, interpretation or explanation of facts)</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2></li></ol><h2 id="5-Write-your-conclusion"><a href="#5-Write-your-conclusion" class="headerlink" title="5. Write your conclusion"></a>5. Write your conclusion</h2><h2 id="6-Extra-Topic"><a href="#6-Extra-Topic" class="headerlink" title="6. Extra Topic"></a>6. Extra Topic</h2><h3 id="how-to-write-a-summarize"><a href="#how-to-write-a-summarize" class="headerlink" title="how to write a summarize"></a>how to write a summarize</h3><p>how to write a comment</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p><a href="https://www.youtube.com/watch?v=Mwv3OlYojWw&amp;t=505s">https://www.youtube.com/watch?v=Mwv3OlYojWw&amp;t=505s</a></p><p><a href="https://www.youtube.com/watch?v=IN6IOSMviS4">https://www.youtube.com/watch?v=IN6IOSMviS4</a></p><p><a href="https://www.youtube.com/watch?v=jLdvEFtUuMM&amp;t=56s">https://www.youtube.com/watch?v=jLdvEFtUuMM&amp;t=56s</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Five-step-to-write-an-article&quot;&gt;&lt;a href=&quot;#Five-step-to-write-an-article&quot; class=&quot;headerlink&quot; title=&quot;Five step to write an article&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="English" scheme="https://hehehuang.github.io/categories/English/"/>
    
    
    <category term="Writing" scheme="https://hehehuang.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="https://hehehuang.github.io/2022/09/23/Machine-Learning/"/>
    <id>https://hehehuang.github.io/2022/09/23/Machine-Learning/</id>
    <published>2022-09-23T13:04:19.000Z</published>
    <updated>2022-09-23T13:04:19.039Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Data Analysis with Pyspark</title>
    <link href="https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Pyspark/"/>
    <id>https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Pyspark/</id>
    <published>2022-09-23T10:25:22.501Z</published>
    <updated>2022-09-23T10:36:13.511Z</updated>
    
    
    
    
    <category term="Data Analysis" scheme="https://hehehuang.github.io/categories/Data-Analysis/"/>
    
    
    <category term="PySpark" scheme="https://hehehuang.github.io/tags/PySpark/"/>
    
  </entry>
  
  <entry>
    <title>Data Analysis with SQL</title>
    <link href="https://hehehuang.github.io/2022/09/23/Data-Analysis-with-SQL/"/>
    <id>https://hehehuang.github.io/2022/09/23/Data-Analysis-with-SQL/</id>
    <published>2022-09-23T10:24:38.833Z</published>
    <updated>2022-09-23T10:36:39.635Z</updated>
    
    
    
    
    <category term="Data Analysis" scheme="https://hehehuang.github.io/categories/Data-Analysis/"/>
    
    
    <category term="SQL" scheme="https://hehehuang.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Data Analysis with Python</title>
    <link href="https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Python/"/>
    <id>https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Python/</id>
    <published>2022-09-23T10:24:12.280Z</published>
    <updated>2022-09-23T10:37:04.870Z</updated>
    
    
    
    
    <category term="Data Analysis" scheme="https://hehehuang.github.io/categories/Data-Analysis/"/>
    
    
    <category term="Python" scheme="https://hehehuang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python OOP</title>
    <link href="https://hehehuang.github.io/2022/09/23/Python%20OOP/"/>
    <id>https://hehehuang.github.io/2022/09/23/Python%20OOP/</id>
    <published>2022-09-23T10:22:54.991Z</published>
    <updated>2022-09-23T10:23:04.903Z</updated>
    
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Basic</title>
    <link href="https://hehehuang.github.io/2022/09/23/Python%20Basic/"/>
    <id>https://hehehuang.github.io/2022/09/23/Python%20Basic/</id>
    <published>2022-09-23T10:21:30.629Z</published>
    <updated>2022-09-30T08:44:53.183Z</updated>
    
    <content type="html"><![CDATA[<p>opening quotation mark, </p><p>brace</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>using variable in string </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">full_name = f&#x27;&#123;first_name&#125;&#123;last_name&#125;&#x27;</span><br></pre></td></tr></table></figure><p>adding whitespce to string with tabs or newlines</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;\tPython&#x27;)</span><br><span class="line">\t means tabs</span><br><span class="line">\n means newlines</span><br></pre></td></tr></table></figure><p>stripping </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stripping</span><br></pre></td></tr></table></figure><p>syntax error : indicates that interpreter doesn’t recognize something in the code as valid python code.</p><p>for example: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># before python 3.6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>) <span class="comment"># it will causing the syntax error, because interpreter doesn&#x27;t recoginize the code. </span></span><br></pre></td></tr></table></figure><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>precisely  decimal </p><p>Underscores in Numbers </p><p>Multiple Assignment </p><p>Constants </p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><h6 id="manipulating-the-list"><a href="#manipulating-the-list" class="headerlink" title="manipulating the list"></a>manipulating the list</h6><p>changing, </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name[0]= &#x27;hh&#x27;</span><br></pre></td></tr></table></figure><p>add,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># append</span><br><span class="line"></span><br><span class="line"># insert</span><br></pre></td></tr></table></figure><p> removing </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># del</span><br><span class="line"># remove(&#x27;hh&#x27;)</span><br><span class="line"></span><br><span class="line"># pop()</span><br></pre></td></tr></table></figure><h6 id="Oranizing-the-list"><a href="#Oranizing-the-list" class="headerlink" title="Oranizing the list"></a>Oranizing the list</h6><p>sorting a list Permanently </p><p>sorting a list temporarily </p><p>printing a list in reverse order</p><p>finding the length of a list </p><p>intentional error</p><p>Looping through an entire list </p><p>a closer look at looping </p><p>make numerical lists</p><p>range() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>list comprehensions</p><p>working with part of a list </p><p>slicing a list </p><p>copy a list </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_list = my_list[:]</span><br></pre></td></tr></table></figure><p>copy() function just give the tag for value. </p><p>but make new list for object. we actually have two separate lists. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy </span><br><span class="line">value = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(value) )</span><br><span class="line">new_value = copy.copy(value)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(new_value) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy </span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(my_list) )</span><br><span class="line">new_list = copy.copy(my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(new_list) )</span><br></pre></td></tr></table></figure><p>loop list </p><h4 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h4><p>immutable list: can not change</p><h4 id="If-statement"><a href="#If-statement" class="headerlink" title="If statement"></a>If statement</h4><h4 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h4><h4 id="While-loops"><a href="#While-loops" class="headerlink" title="While loops"></a>While loops</h4><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><h4 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h4><h4 id="Files-and-Exception"><a href="#Files-and-Exception" class="headerlink" title="Files and Exception"></a>Files and Exception</h4><h4 id="Testing-your-code"><a href="#Testing-your-code" class="headerlink" title="Testing your code"></a>Testing your code</h4><p>build in data type</p><h4 id="If-statement-1"><a href="#If-statement-1" class="headerlink" title="If statement"></a>If statement</h4><h4 id="While-Statement"><a href="#While-Statement" class="headerlink" title="While Statement"></a>While Statement</h4><h4 id="Easy-Principle"><a href="#Easy-Principle" class="headerlink" title="Easy Principle"></a>Easy Principle</h4><ul><li><p>indentation: 4 space</p></li><li><p><strong>Line Length</strong>: less than 80 characters </p></li><li><p>blank line: proper blank line to seperate two sections</p></li><li><p>if statement: i &gt; 4 </p></li><li><p>[google python code styling]: <a href="https://google.github.io/styleguide/pyguide.html">https://google.github.io/styleguide/pyguide.html</a>“google python code styling”</p></li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h4><p>&lt;<Python Crash Course>&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;opening quotation mark, &lt;/p&gt;
&lt;p&gt;brace&lt;/p&gt;
&lt;h4 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h4&gt;&lt;p&gt;using var</summary>
      
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Array &amp; Linked List</title>
    <link href="https://hehehuang.github.io/2022/09/23/Array%20&amp;%20Linked%20List/"/>
    <id>https://hehehuang.github.io/2022/09/23/Array%20&amp;%20Linked%20List/</id>
    <published>2022-09-23T10:20:09.606Z</published>
    <updated>2022-09-23T10:20:32.597Z</updated>
    
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
    <category term="Data Structure" scheme="https://hehehuang.github.io/tags/Data-Structure/"/>
    
    <category term="Algorithm" scheme="https://hehehuang.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Data Engineer</title>
    <link href="https://hehehuang.github.io/2022/09/23/Data%20Engineer/"/>
    <id>https://hehehuang.github.io/2022/09/23/Data%20Engineer/</id>
    <published>2022-09-23T10:12:25.135Z</published>
    <updated>2022-09-23T10:16:35.833Z</updated>
    
    <content type="html"><![CDATA[<p>Data Engineer</p><p>What is Data Engineer?</p><p>What is main duly for data engineer?</p><p>how data engineer work with AWS?</p><p>what can i learn for data engineer?</p><ol><li>Big Data: data pipeline,  </li><li>Cloud service</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Data Engineer&lt;/p&gt;
&lt;p&gt;What is Data Engineer?&lt;/p&gt;
&lt;p&gt;What is main duly for data engineer?&lt;/p&gt;
&lt;p&gt;how data engineer work with AWS?&lt;/p&gt;
&lt;p&gt;wh</summary>
      
    
    
    
    <category term="Big Data" scheme="https://hehehuang.github.io/categories/Big-Data/"/>
    
    <category term="Cloud Service" scheme="https://hehehuang.github.io/categories/Big-Data/Cloud-Service/"/>
    
    
    <category term="AWS" scheme="https://hehehuang.github.io/tags/AWS/"/>
    
    <category term="Data Warehouse" scheme="https://hehehuang.github.io/tags/Data-Warehouse/"/>
    
    <category term="NoSQL" scheme="https://hehehuang.github.io/tags/NoSQL/"/>
    
    <category term="Data Pipeline" scheme="https://hehehuang.github.io/tags/Data-Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>Tree</title>
    <link href="https://hehehuang.github.io/2022/09/22/Tree/"/>
    <id>https://hehehuang.github.io/2022/09/22/Tree/</id>
    <published>2022-09-22T08:36:43.586Z</published>
    <updated>2022-09-22T08:42:39.475Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Tree is the basic data Structure</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">searchTree</span>():</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tree is the basic data Structure&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="Python" scheme="https://hehehuang.github.io/categories/Python/"/>
    
    
    <category term="Data Structure" scheme="https://hehehuang.github.io/tags/Data-Structure/"/>
    
    <category term="Algorithm" scheme="https://hehehuang.github.io/tags/Algorithm/"/>
    
  </entry>
  
</feed>
