{"meta":{"title":"HuangheheTech","subtitle":"","description":"huanghehe happy forever","author":"Huang He","url":"https://HeHeHuang.github.io","root":"/"},"pages":[{"title":"Personal Information","date":"2022-09-28T12:15:06.212Z","updated":"2022-09-28T12:15:06.200Z","comments":false,"path":"about/index.html","permalink":"https://hehehuang.github.io/about/index.html","excerpt":"","text":"HUANGHESUMMARYMaster of Technology graduate with Data scientist experience in time series predictive modelling and data mining. Skilled in machine learning, NLP, deep learning, statistics, problem solving, and programming. Seeking to increase data and model efficiency for Company. 4+ years of software engineer experience in IT industry that involved developing, testing, and maintaining enterprise healthcare applications achieving 100% client satisfaction. KEY SKILLS Data Analysis &amp; Data Visualization &amp; Big Data analytic Programming Language: Python, scikit-learn, PyTorch, Spark, Hadoop, R Programming, HTML, SQL, .NET, C# Database&#x2F;Server: MySQL, Oracle, MongoDB NLP (Deep Learning)Machine Learning Agile MethodologiesPMP WORKING EXPERIENCEData Scientist Created and presented Arima models to forecast influenza vaccine consumption for procurement team for better decision making Created and presented Arima models to forecast influenza vaccine consumption for different polyclinics in SHP for better manpower arrangement by using R, JMP and Python Used Streamlit to Create Web application for user to upload data to do forecasting accurately Software Engineer&#x2F; Application Consultant Provided IT support services, troubleshooting and system operation. Quickly solved production issues with 95% successCollaborated with stakeholders to identify requirements and recommend solutions to address business needs Translated business requirements into functional requirements for development teams in India Monitored and controlled work from India team and conducted SIT, UAT with stakeholders Used Asp.net, Asp.net MVC, oracle to develop, test and maintain medical healthcare system and, achieved 100% client satisfaction and on-time completion Software Engineer Used unity3D and C# to make VR project which allows customers to view the department in detail Developed a simple mobile app by using web service, SQL and Telerik Developed functions for website by using c#, ado.net"},{"title":"书单","date":"2022-09-24T10:40:39.161Z","updated":"2022-09-21T05:03:10.207Z","comments":false,"path":"books/index.html","permalink":"https://hehehuang.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-09-21T09:10:16.325Z","updated":"2022-09-21T05:03:10.208Z","comments":false,"path":"categories/index.html","permalink":"https://hehehuang.github.io/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2022-09-28T11:58:44.326Z","updated":"2022-09-28T11:58:44.310Z","comments":false,"path":"links/index.html","permalink":"https://hehehuang.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-09-24T16:41:17.610Z","updated":"2022-09-21T05:03:10.208Z","comments":false,"path":"repository/index.html","permalink":"https://hehehuang.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-09-24T09:44:30.595Z","updated":"2022-09-24T09:44:30.582Z","comments":false,"path":"tags/index.html","permalink":"https://hehehuang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"自我认知","slug":"自我认知","date":"2023-02-15T15:49:02.000Z","updated":"2023-02-19T15:41:47.520Z","comments":true,"path":"2023/02/15/自我认知/","link":"","permalink":"https://hehehuang.github.io/2023/02/15/%E8%87%AA%E6%88%91%E8%AE%A4%E7%9F%A5/","excerpt":"","text":"hhii mei kaishi haibukaishi me.","categories":[],"tags":[]},{"title":"思维模型","slug":"思维模型","date":"2023-02-14T15:23:24.000Z","updated":"2023-02-15T15:46:31.085Z","comments":true,"path":"2023/02/14/思维模型/","link":"","permalink":"https://hehehuang.github.io/2023/02/14/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"思考的本质 思维方式 心智模型 思维模型","categories":[{"name":"超级学习","slug":"超级学习","permalink":"https://hehehuang.github.io/categories/%E8%B6%85%E7%BA%A7%E5%AD%A6%E4%B9%A0/"}],"tags":[]},{"title":"知识体系","slug":"知识体系","date":"2023-02-12T15:58:57.000Z","updated":"2023-02-12T15:58:58.017Z","comments":true,"path":"2023/02/12/知识体系/","link":"","permalink":"https://hehehuang.github.io/2023/02/12/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Python Automation","slug":"Python-Automation","date":"2022-12-06T14:17:08.000Z","updated":"2023-01-15T15:17:19.155Z","comments":true,"path":"2022/12/06/Python-Automation/","link":"","permalink":"https://hehehuang.github.io/2022/12/06/Python-Automation/","excerpt":"","text":"python 自动化 操作文档 word PPT excel scape tomorrow the redirect path 只管去做： 为什么会焦虑？ 小强升职记 项目与习惯 需求分析哈哈哈 time to chengdu 英语练习 住房搞定 一切顺利 重新起航。","categories":[],"tags":[]},{"title":"Requirement Analysis","slug":"Requirement-Analysis","date":"2022-12-03T12:17:52.000Z","updated":"2022-12-05T13:44:11.570Z","comments":true,"path":"2022/12/03/Requirement-Analysis/","link":"","permalink":"https://hehehuang.github.io/2022/12/03/Requirement-Analysis/","excerpt":"","text":"requirement analysis 怎么做需求？ 需求分析 大话软件工程","categories":[],"tags":[]},{"title":"Learning Method","slug":"Learning-Method","date":"2022-11-28T02:45:55.000Z","updated":"2022-11-28T04:19:29.731Z","comments":true,"path":"2022/11/28/Learning-Method/","link":"","permalink":"https://hehehuang.github.io/2022/11/28/Learning-Method/","excerpt":"","text":"学习究竟是什么？刻意练习：1.学习区练习 85%熟悉的+15%不知道的知识 舒适区-&gt;学习区-&gt;恐慌区 2.切成小块重复练习 列出所有知识点，一个个练习，学会了就转入下一个 基础训练，训练套路：比如：编程中的数据结构 专家：用短时记忆调取自己无限的长期记忆 3.整个学习，随时获得有效反馈 自己调研相关知识 独立或者跟人合作完成项目 写论文 4.练习时，注意力高度集中 番茄钟 间隔、测验和建立连接。 ANKI： 安排间隔，不要突击 不同场景，不同方式学同一个内容 参加测验 新旧知识连接 思维模式：成长性思维：任务是学习的机会，努力，什么事情都是能做成的 交叉学习：储存记忆+提取记忆：提取强度越用越高。每一次提取记忆，提取强度都会增加。 交叉着在同一时期内学习几门课程，比学完一门再学一门的效果好得多。读书也是这样。我们应该随时都有好几本书在读。 “自学”的学问（1）自学于文本。自学成败的关键，在于你是否善于处理文本信息。我们可以把文本功夫分成三级。 第一级，是阅读一段文字，或者听一节课，你能不能抓住它的要点。这是基本功，练习这个功夫的方法是记笔记。 第二级，是有一个问题，你能不能从一堆书里找到答案。 第三级，是建立自己的系统。 （2）自学于操作理论和实践结合，把学到的东西及时在实践中反复纠错、强化，达到深刻理解和使用。 （3）从自学到精通一个需要啥就能学啥，学啥就能会啥的人，必定是一个高自尊的人。他对生活有强烈的掌控感，无所畏惧，游刃有余，宠辱不惊。 强力研读笔记法读书笔记的一个重大作用是给自己日后以最快的速度重温这本书提供方便，直接看笔记就可以了。强力研读要求读书笔记必须包括四方面的内容：第一，清晰表现每一章的逻辑脉络；第二，带走书中所有的亮点；第三，大量自己的看法和心得；第四，发现这本书和以前读过的其他书或文章的联系。 （1）清晰表现每一张的逻辑脉络。我习惯完全按照原书的章节给读书笔记划分章节，甚至保留各章的标题。在每一章的开头，用自己的话写下这一章作者到底想说什么，各章串起来就形成了系统。不过这种内容提要并不重要，重要的是一定要能看书作者的逻辑脉络。大多数人之所以没有真正理解一本书，就是因为看不到这个脉络。读书笔记的第一作用就是抛开故事记住文章。让一本书从厚变薄，从具体的山川景色变成抽象的地图。只有当你跳出字里行间，以居高临下的姿态俯视全章，它的脉络层次能变得清晰。看清楚以后不要抄作者的话，用自己的语言把这个脉络写出来，就好像画地图一样。 （2）带走书中所有的亮点。笔记，是我听说了一个想法之后很激动，必须把这个想法记下来据为己有的行为。所以逻辑脉络之外，如果发现真正好的小故事—我们称之为“亮点”，那么就把这个故事也写下来，甚至具体到细节。一方面，将来万一要做写文章之类的事，从笔记里翻出来就可以用。更重要的一点是这些故事日后会将反复地在我们的大脑中出现，它们用各种出其不意的方式左右我们的思想，甚至改变我们对世界的认识。你不得不承认有些段子的生命力就是比其原来所在的文章更长，以至于最后成为典故。读书，在某种程度上就是寻找能够刺激自己思维的那些亮点。我们在分析脉络的时候要忽略故事，分析完脉络再把故事带走。 （3）大量自己的看法和心得。你不可能对说得好的一句话无动于衷。你可以写下自己对这件事的理解，你还可以写下对作者的质疑或肯定。更高级的批注则是写下自己因为看到这段文字而产生的灵感。一本好书每一章都能让人迸发出10个以上的灵感。也许你突然想到这解决了你之前一直关注的问题，尽管这个问题看似与此书无关；也许你想到了对书中思想的一个新的应用；也许你想到你可以把作者的理论往前推一步。这些想法未必都真的有用，但是都非常宝贵，因为如果你不马上记下来，它们就很快被忘记。 （4）发现这本书和以前读过的其他书或文章的联系。现代人写的书，极少有一本书中的思想完全独立于世界，往往真正新的知识都建立在旧的知识之上。对着书中的观点，有没有更新的证据支持或反对这个结论？要找到他们的共同点和不同点。一个真正善于主动读书的人对这种联系是非常非常敏感的。如果你读过足够多的书，你会获得一种更难得的精力：感受人类知识的进度。你会发现一个问题在这本书里是这个说法，而过了几年之后有人另写的一本书中，引用了更有利的证据，把整个结论改变了；有时候你必须从几本书的几个不同结论中判断哪个是靠谱的；有时候你会觉得他们说的其实都不对，只有你知道正确答案。到了这个层次，你已经跟书的作者完全平等了。这时候，你进入了读书的高阶状态。读书是求知的过程，知识在转化成你对世界的理解前只是信息，对待信息，你需要有批判性思维去分辨哪些是事实，哪些是作者的观点，作者的观点是否有足够的论据支撑。看书的时候不盲从，不全盘接收，用批判性思维去评判作者的观点，建立和书籍的交互。 （5）笔记是对一本好书最大的敬意。好书之所以要读两遍，最重要的目的就是获得这些心得、灵感和联系。我们对一本不太熟悉的书，第一次读的时候我们往往会陷入作者的思想之中，我们大脑全部的带宽都被用于理解作者的思想，而没有更多的余地去产生别的想法了。“幽默是智力过剩的体现”，想法也只在带宽过剩的时候才会冒出来。只有当你读第二遍的时候，你才能气定神闲地发表意见。第一遍是为了陷进去，第二遍是为了跳出来。 学习之道（11天高效入门）自主学习者：元认知学习模型理解学习任务 了解需要掌握什么？ 需要重现还是泛化？ 你将被如何评估 拥有的时间和资源 制定目标 想想雄心壮志 想想要达成什么样的水平 然后把任务分成具体目标 计划何时，何地以及如何去实现这些目标 例子：研究机器学习的SVM，目标：能够很好的理解他的过程，以至于你可以向任何人解释他。为了这一目的，计划，以三个不同的来源阅读有关光合作用的资料，并且练习阐释技巧 学习 根据计划进行学习，尝试不同的学习工具 番茄钟：避免多重任务 发散模式与集中模式 主动学习： 主动回忆和阐释 交叉学习与记忆 工作记忆 3.深度学习□进行主动学习：练习主动回忆（“检索练习”）和阐释。□进行交叉学习和间隔安排学习时间。□不要一门心思去做简单的事情，要挑战自己。□保证充足的睡眠并坚持积极锻炼身体。 4.最大限度利用工作记忆 ​ □把学习内容分成小组块，把花哨难懂的说法换成简单的说法。□使用待办事项清单来清空你的工作记忆 5.有效记忆□使用以下记忆窍门来加速记忆：缩略语、图像和记忆宫殿。□使用隐喻来快速掌握新概念。6.获得直觉并敏捷地思考□内化（不要只是死记硬背）解决重要科学或数学问题的程序。□利用恰当的手势来帮助你记住并理解新的语言词汇。 7.发挥自律能力□想方设法在不依赖自律能力的情况下克服挑战。□从周围环境中消除诱惑、障碍和让人分心的事物。□改变你的习惯。□规划好你的目标，识别障碍并提前确定应对障碍的理想方式。 8.激励自己□提醒自己完成任务能带来的所有好处。□完成困难的任务后奖励自己。□确保任务的难度与你的技能相匹配。□设定目标：长期目标、里程碑目标和过程目标。 9.进行有效阅读□在详细阅读文本之前先对文本进行预览。□主动阅读：对文本进行思考，练习主动回忆和做批注。 9.进行有效阅读□在详细阅读文本之前先对文本进行预览。□主动阅读：对文本进行思考，练习主动回忆和做批注。 10.在考试中大获全胜□尽可能全面地了解考试相关信息并制订备考计划。□练习做以往的考试题。□在考试期间仔细阅读考试说明，把握时间进度并检查答案。□使用“硬启动”技巧。11.成为一名专业学习者□做一名拥有元认知能力的学习者：理解任务、设定目标和计划、学习、监控与调整。□从过去的经验中汲取教训：评估哪些方面进展顺利，哪些方面可以改进。 监控和调整 你是否真的在进步 你是否使用最佳的学习策略 学习方式是不是合适 高效学习（得到版本）怎么通过项目管理学习？","categories":[{"name":"Learning Method","slug":"Learning-Method","permalink":"https://hehehuang.github.io/categories/Learning-Method/"}],"tags":[]},{"title":"statistics","slug":"statistics","date":"2022-11-27T12:15:09.000Z","updated":"2022-11-27T12:16:43.084Z","comments":true,"path":"2022/11/27/statistics/","link":"","permalink":"https://hehehuang.github.io/2022/11/27/statistics/","excerpt":"","text":"","categories":[{"name":"Math","slug":"Math","permalink":"https://hehehuang.github.io/categories/Math/"}],"tags":[]},{"title":"probability theory","slug":"probability-theory","date":"2022-11-27T12:14:53.000Z","updated":"2022-11-27T12:16:58.393Z","comments":true,"path":"2022/11/27/probability-theory/","link":"","permalink":"https://hehehuang.github.io/2022/11/27/probability-theory/","excerpt":"","text":"","categories":[{"name":"Math","slug":"Math","permalink":"https://hehehuang.github.io/categories/Math/"}],"tags":[]},{"title":"linear algebra","slug":"linear-algebra","date":"2022-11-27T12:13:39.000Z","updated":"2022-11-29T11:35:03.547Z","comments":true,"path":"2022/11/27/linear-algebra/","link":"","permalink":"https://hehehuang.github.io/2022/11/27/linear-algebra/","excerpt":"","text":"序言为什么学这个？ 从哪里学的？ 学完以后可以学什么？ 向量究竟是什么？ 线性组合，张成的空间与基 矩阵与线性变换 矩阵乘法与线性变换复合 三维空间中的线性变换 行列式 逆矩阵，列空间与零空间 非方阵 电积与对偶性","categories":[{"name":"Math","slug":"Math","permalink":"https://hehehuang.github.io/categories/Math/"}],"tags":[]},{"title":"calculus","slug":"calculus","date":"2022-11-27T12:12:49.000Z","updated":"2022-11-29T11:14:15.501Z","comments":true,"path":"2022/11/27/calculus/","link":"","permalink":"https://hehehuang.github.io/2022/11/27/calculus/","excerpt":"","text":"介绍为什么学这个？ 从哪里学的？ 学完以后可以学什么？ 微积分的本质导数什么是导数？f(x) 在x的导数： 在x点，x的微小变化与y的微小变化之间的关系 dy&#x2F;dx Derivatives are fundamentally about looking at tiny changes to some quantity and how that relates to a resulting tiny change in another quantity. 怎么求导数？y&#x3D;x*x y+dy &#x3D; (x+dx)(x+dy) 求出 dy&#x2F;dx 几何的角度看导数假设x*x 增加了dx， 从图像中怎么看出来？怎么求1&#x2F;x的导数？ 三角函数sinx cosx 为什么sinx的导数是cos x？ 链式法则和乘积法则指数函数求导隐函数求导是怎么回事？极限积分与微积分基本定理面积和斜率有什么联系高阶导数","categories":[{"name":"Math","slug":"Math","permalink":"https://hehehuang.github.io/categories/Math/"}],"tags":[]},{"title":"ML Introduction","slug":"ML-Introduction","date":"2022-11-25T10:49:46.000Z","updated":"2022-11-25T10:52:10.318Z","comments":true,"path":"2022/11/25/ML-Introduction/","link":"","permalink":"https://hehehuang.github.io/2022/11/25/ML-Introduction/","excerpt":"","text":"Machine Learning 流程不同类型的Machine Learning Linear Regression Logistic Regression SVM Pertron Byies Decision Tree Random Tree Boosting","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://hehehuang.github.io/categories/Machine-Learning/"}],"tags":[]},{"title":"PythonDataStructure","slug":"PythonDataStructure","date":"2022-11-23T13:06:49.000Z","updated":"2022-11-23T13:09:55.478Z","comments":true,"path":"2022/11/23/PythonDataStructure/","link":"","permalink":"https://hehehuang.github.io/2022/11/23/PythonDataStructure/","excerpt":"","text":"Big O Linked list Double Linked List Stack Queue Tree BST HashTable Graph","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[]},{"title":"Python Advance","slug":"Python-Advance","date":"2022-11-21T12:37:24.000Z","updated":"2022-11-23T13:05:10.450Z","comments":true,"path":"2022/11/21/Python-Advance/","link":"","permalink":"https://hehehuang.github.io/2022/11/21/Python-Advance/","excerpt":"","text":"闭包什么是闭包？函数中的变量在使用完成后会被销毁。 闭包可以让你继续使用这个变量 怎么构成闭包？ 函数嵌套 内函数使用外函数的变量 外部函数返回内部函数 123456def outer_func(num1): def inner_func(num2): num1 = num1 + num2 return inner_func 闭包的使用场景？怎么在闭包内修改外部函数变量？nonlocal 关键词，声明外部函数变量 装饰器多任务编程网络编程","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[]},{"title":"Computer Composition","slug":"Computer-Composition","date":"2022-11-05T13:15:20.000Z","updated":"2022-11-05T17:37:24.330Z","comments":true,"path":"2022/11/05/Computer-Composition/","link":"","permalink":"https://hehehuang.github.io/2022/11/05/Computer-Composition/","excerpt":"","text":"计算机硬件系统：运算器+控制器+存储器+输入&#x2F;输出设备 中央处理器 什么是CPU？CPU &#x3D; 运算器（数据的加工处理）+控制器（根据程序要求进行控制） 处理指令：鼠标的点击，键盘的按 运算数据：1+1 的运算 存储器： 内存储器： 什么是内存？内存是临时存储等待CPU处理的数据，读写速度很快。 在程序运行的时候， 代码是需要在内存开辟空间来储存的。 当内存满了以后， 电脑也就卡了。 所以，数据结构与算法就显得重要了。 外存储器：硬盘 什么是操作系统？Windows Mac Unix Linuxs","categories":[{"name":"Computer Composition","slug":"Computer-Composition","permalink":"https://hehehuang.github.io/categories/Computer-Composition/"}],"tags":[]},{"title":"Linux","slug":"Linux","date":"2022-11-02T20:12:59.000Z","updated":"2022-11-04T15:59:17.420Z","comments":true,"path":"2022/11/03/Linux/","link":"","permalink":"https://hehehuang.github.io/2022/11/03/Linux/","excerpt":"","text":"准备着：","categories":[],"tags":[]},{"title":"Generic C++","slug":"Generic-C","date":"2022-10-28T10:10:16.000Z","updated":"2022-10-29T16:57:56.402Z","comments":true,"path":"2022/10/28/Generic-C/","link":"","permalink":"https://hehehuang.github.io/2022/10/28/Generic-C/","excerpt":"","text":"泛型编程模版什么是模版？函数模版怎么声明函数模版？两种方法 怎么使用函数模版？普通的函数与函数模版有什么区别？普通函数发生自动类型转换，（隐式类型转换） 函数模版，如果是利用自动类型推导，不会发生隐式转换， 如果是显示指定类型的方式，可以发生隐式类型转换。 1myFunc&lt;int&gt;(); 什么是隐式类型转换？123int a = 1char c = &#x27;c&#x27;cout &lt;&lt; a + c &lt;&lt; endl; //可以得到结果100， char c 会被自动转换成相对应的ASIC码， c-99 普通函数与函数模版调用规则是什么？4点 如果函数模版和普通模版都可以调用， 优先调用函数模版。 如果想强制性调用函数模版， 可以是用空模版参数列表 函数模版也可以发生函数重载 如果函数模版可以产生更好的匹配， 优先调用函数模版 1myFunc&lt;&gt;(a,b) //空模版参数列表 模版的局限性是什么？比如，传入的是自定义的Person a 与Person b 就无法对比。 1234template&lt;class T&gt;void compare(T a, T b)&#123; if (a &gt;b) &#123; ... &#125;&#125; 解决方式： 具体化 自定义的Person类： 告诉编译器 Person 怎么对比。 类模版类模版的作用是什么？建立一个通用类，类中的成员数据类型可以不具体制定，而是用一个虚拟的类型来代表。 类模版的语法是什么？1234template&lt;typename T&gt;class&#123; &#125; 类模版与函数模版的区别是什么？ 类模版没有自动类型推导的使用方式 类模版在模版参数列表中可以有默认参数 STL什么是STL？standard template library STL 广义上能分成几大部分？ 三大部分：容器（container）算法（algorithm）迭代器（iterator） STL 六大组件是什么？容器，算法， 迭代器：算法与容器之间想要有交流必须通过迭代器 仿函数：行为类似函数 适配器（配接器）：比如有些算法只接收一个参数，通过适配器， 就可以使之接收多个算法 空间配置器：负责空间的配置与管理 容器容器指的是哪些？Vector，list，duque, set, map 用来存放数据 Vector什么是Vector？动态数组，可以储存一个能够存放任意类型的动态数组，能够增加和压缩数据。 vector 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。 是因为它可以包含其他对象。一个容器中的所有对象都必须是同一种类型的。 String什么是String？char * 是指针。 String 本质上是一个类，Char* 型的容器 序列式容器： 强调值的排序，序列式容器中的每个元素均有固定的位置。 关联式容器： 二叉树的结构，各元素之间没有严格上物理上的顺序关系。 算法：质变算法 运算过程中会改变区间内的元素的内容。如：拷贝，替换，删除 非质变算法 运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值 迭代器提供一种方法，能够依次序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 仿函数适配器（配接器）空间配置器","categories":[{"name":"C++","slug":"C","permalink":"https://hehehuang.github.io/categories/C/"}],"tags":[{"name":"Generic Programming","slug":"Generic-Programming","permalink":"https://hehehuang.github.io/tags/Generic-Programming/"}]},{"title":"FGBA","slug":"FGBA","date":"2022-10-27T13:48:32.000Z","updated":"2022-10-29T17:18:52.620Z","comments":true,"path":"2022/10/27/FGBA/","link":"","permalink":"https://hehehuang.github.io/2022/10/27/FGBA/","excerpt":"","text":"FGBA","categories":[{"name":"FGBA","slug":"FGBA","permalink":"https://hehehuang.github.io/categories/FGBA/"}],"tags":[]},{"title":"C++ Basic","slug":"C-Basic","date":"2022-10-23T08:57:04.000Z","updated":"2022-10-29T16:35:32.580Z","comments":true,"path":"2022/10/23/C-Basic/","link":"","permalink":"https://hehehuang.github.io/2022/10/23/C-Basic/","excerpt":"","text":"C++ 基础：函数： 什么是函数分文件？为什么要分文件编写？让代码结构更加清晰，在头文件中写函数的声明，在源文件中写函数的定义。 指针： 什么是指针？内存编号是从0开始的，一般用十六进制数字表示 可以利用指针变量保存地址。 指针的作用是什么？可以通过指针间接的访问内存 指针怎么通过保存的地址，拿到对应的值？123456789101112//定义指针int a = 10;// 数据类型 * 指针变量名int * p;//让指针记录变量a的地址p = &amp;a; //&amp;取址符号//可以通过解引用的方式来找到 指针指向的内存*p 指针也是数据类型，那么它占用多少内存空间？4 字节， 在32位操作系统下。8个字节，在64位操作系统下 123sizeof(int *);sizeof(char *); 什么是空指针？指针变量指向了编号为0的空间。 用途： 初始化指针变量。 空指针指向的内存不可访问， 内存编号0～255 是系统占用内存，用户访问不了 什么是野指针？指针变量指向了非法的内存空间。 什么是const修饰指针？常量指针 特点：指针的指向可以修改，但是指针指向的值不可以改 123const int * p = &amp;a; //常量指针 指针常量 特点： 指针的指向不可以改，但指针指向的值可以改 1int * const p = &amp;a; const 即修饰指针，又修饰常量 特点：指针的指向跟指针指向的值都不可以改 1const int * const p = &amp;a; 怎么利用指针来访问数组？12345int arr[3] = &#123;1,2,3&#125;;int * p = arr; //arr 是数组第一个元素的首地址p++； //指针向后偏移了4个字节 怎么利用指针作为函数的参数来修改实参的值？ 12345void swap(int *p1, int *p2)&#123; int temp = *p; *p1 = *p2; *p2 = temp;&#125; 内存模型：内存在C++程序在执行时， 都分成了那几个区域？代码区，存放函数体的二进制代码 全局区，存放全局变量和静态变量以及常量 栈区，有编译器自动分配释放，存放函数的参数值，局部变量 堆区： 由程序员分配和释放， 若程序员不释放， 程序结束，由操作系统回收 new 操作符是什么？12int *a = new int(10); //利用new创建的数据，会返回该数据对应的类型的指针 函数指针： 如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，这段存储空间的首地址称为这个函数的地址。而且函数名表示的就是这个地址。既然是地址我们就可以定义一个指针变量来存放，这个指针变量就叫作函数指针变量，简称函数指针。 12int *func(int, int)&#123;...&#125; //这个函数返回 指针int （*func1）(int ,int) &#123; ...&#125; // 这个是函数指针 引用什么是引用？给变量起别名。 引用必须初始化， 引用在初始化后，不可以改变。 引用的本质是指针常量。 1234int a = 10;int &amp;b = a; //引用int *p = &amp;a; //指针 引用，值传递，地址传递 之间的区别是什么？12345678void mySwap(int &amp;a, int &amp;b) //这里的形参的a 就是实参的a， 别名跟原名可以是一样的。&#123; int temp = a; a = b; b = temp;&#125;mySwap03(a,b) 引用做函数返回值 123 C++面向对象：封装： 将属性和行为结合在一起模拟事物， 还设置了访问权限。 访问权限：public， protected，private 1234567891011121314151617class Person&#123; private: string name public: void setName(string Name)&#123; name = Name; &#125; void showName()&#123; cout &lt;&lt; &quot;Name&quot; &lt;&lt; endl; &#125;&#125;int main()&#123; Person p1; p1.setName(&quot;HH&quot;); p1.showName();&#125; 对象的初始化和清理：为什么有： 安全温习 析构函数（）： 消除对象 构造函数（）： 构造初始属性，创建对象时，为对象成员属性赋值，比如工厂里面的出场设置。 1234class Person&#123; Person()&#123;&#125; ~Person()&#123;&#125;&#125; 参数来划分： 有参构造函数 无参构造函数 类型来划分： 普通构造 拷贝构造: 拷贝构造函数调用时机： 使用一个已经创建完毕的对象来初始化一个新对象 12Person p1 = Person(10);Person p2 = p1; 值传递的方式给函数参数传值 1234567void doWork(p)&#123;&#125;Person p;doWork(p); //此处的p， 并不是上面的p对象， 而是拷贝函数构造的一个副本。 值传递的本质就是复制出一个副本。 值方式返回局部对象 12345//方法Person doWork2()&#123;Person p1; //匿名对象return p1; // return 的并不是 p1 的匿名对象， 而是一个副本。 &#125; 调用方法： 括号法： 123//无参构造//有参构造//拷贝构造 Notice：调用默认构造函数时候，不要加（） 123//为什么不要加（）Person p1(); //编译器会以为这是一个函数声明。 创造一个 函数名为p1，返回Person类型的函数，不会认为是创建对象void func(); 显示法： 123Person p1;Person p2 = Person（10）;// 单看 Person（10） 是匿名对象。后将匿名对象赋予person p2Person（10）;//这行代码一执行完， 匿名对象就会被清除 隐式转换法： 1234Person p4 = 10;Person p4 = Person(10); Person p5 = p4;Person p5 = Person(p4); 构造函数的调用规则：默认情况下，创造一个类， C++编译器会至少给你添加哪三个函数？调用规则： 如果用户自定义了有参数构造函数，会发生什么？如果用户自定义了拷贝构造函数，会发生什么？深拷贝与浅拷贝什么是深拷贝？什么是浅拷贝？初始化列表初始化列表有什么作用？初始化列表的语法？123456789101112//传统的初始化//使用初始化列表Person():m_a(10),m_b(20),m_c(30)&#123;&#125;Person(int a, int b ,int c):m_a(a),m_b(b),m_c(c)&#123;&#125; 类对象作为类成员什么是对象成员？1 当B类中有A类的对象时，在创建B类对象时， 构造函数与析构函数分别是怎么调用的？先构造A类对象，再构造B类对象 先析构B类对象，再析构A类对象 1void 静态成员：静态成员的作用？静态成员变量有什么特点？静态成员函数有什么特点？有哪两种调用静态成员函数的方式？1 C++ 对象模型和this指针：成员变量和成员函数在C++中，类内的成员变量和成员函数怎么分开存储？空对象占体格内存空间：1 它有着一个独一无二的内存地址 静态成员变量或者函数， 都不属于类对象上 非静态成员变量属于类的对象上。 非静态成员函数不属于类的对象上， 每一个非静态成员的都只会诞生一份函数实例， 也就是说 多个同类型的对象会共用同一块代码。 怎么区分是哪个对象调用了自己？this 指针：指向 被调用的成员函数所属的对象 this 指针的用途是什么？ 当形参和成员变量同名时，可用this 指针来区分 在类的非静态成员函数中返回对象本身，可使用return *this 友元：友元的目的是什么？让一个函数或者类访问另一个类中私有成员 运算符重载：运算符重载的作用？对于内置数据类型，编译器知道如何运算。 但自定义数据类型，编译器就不知道怎么运算了。 加号运算符重载： operator+ : 编译器给了一个通用名 继承：拥有上一级的共性，还有自己的特性。 继承的基本语法：1class derived-class: access-specifier base-class 自身场景的应用： 网页中， 公共的头部，公共的底部，只有中心内容不一样。 1234567891011121314151617class BasedPage&#123; public: void header(); void footer();&#125;;class Java : public BasedPage&#123; public: void content();&#125;class Python: public BasedPage&#123; public: void content();&#125; 有哪三种继承方式？1 从父类继承过来的成员，哪些属于子类对象中的？1 子类继承父类后，当创建子类对象是，会调用父类的构造函数。 子类父类的构造函数的顺序是？先Base构造函数，在Son构造函数， 后Son析构函数，再base的析构函数 当父类与子类有同名成员，怎么通过子类对象，来访问子类或者父类的数据？子类同名成员，直接访问 父类同名成员，加作用域 Notice：如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类所有同名成员函数，如果想要访问父类的同名成员，需要加上作用域 静态成员同名 多继承 菱形继承 多态：多态的基本概念： 子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现 什么是对象切割？ 多态的底层原理是什么？ 纯虚函数和抽象类 纯虚函数的作用是什么？1virtual void func()=0; 什么是抽象类？抽象类有什么特点？ 无法实例化对象 子类必须重写抽象类中的纯虚函数，否则也属于抽象类 虚析构和纯虚析构","categories":[{"name":"C++","slug":"C","permalink":"https://hehehuang.github.io/categories/C/"}],"tags":[{"name":"OOP","slug":"OOP","permalink":"https://hehehuang.github.io/tags/OOP/"}]},{"title":"Recommender System","slug":"Recommender-System","date":"2022-09-29T12:38:48.000Z","updated":"2022-09-29T12:39:42.839Z","comments":true,"path":"2022/09/29/Recommender-System/","link":"","permalink":"https://hehehuang.github.io/2022/09/29/Recommender-System/","excerpt":"","text":"","categories":[{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"}],"tags":[{"name":"PySpark","slug":"PySpark","permalink":"https://hehehuang.github.io/tags/PySpark/"}]},{"title":"Data Science","slug":"Data-Science","date":"2022-09-28T19:10:26.000Z","updated":"2022-10-14T18:22:57.274Z","comments":true,"path":"2022/09/29/Data-Science/","link":"","permalink":"https://hehehuang.github.io/2022/09/29/Data-Science/","excerpt":"","text":"Statistics Descriptive Statistic Visualization of data Inferential Statistics One sample test of difference&#x2F;One sample hypothesis test. Confidence Interval Contingency Tables and Chi Square Statistic T-test or Anova Pearson Correlation Bi-variate Regression Multi-variate Regression Probability Random variable Discrete variable Continous variable Line Algebra Calculus Optimization Gradient descent Python Python Basic Python Advance Algorithm Visualization Web Scraping Machine Learning Superivor Learning Regression Classification Unsuperivor Learning Clusting Deep Learning DNN CNN NLP Computer Vision Data Mining Network Analysis Recommender System Big Data Batching Processing Hadoop Spark Hive Kafka Flink Reids Stream Processing SQL Relation SQL NOSQL AWS Docker &amp; K8s Python GUI Web Development fundatmetals statistics programming machine learning text ming&#x2F;nlp big data data ingestion data munging Tool box","categories":[],"tags":[]},{"title":"Spark ML Case","slug":"Spark-ML-Case","date":"2022-09-26T09:21:53.000Z","updated":"2022-09-26T09:21:53.804Z","comments":true,"path":"2022/09/26/Spark-ML-Case/","link":"","permalink":"https://hehehuang.github.io/2022/09/26/Spark-ML-Case/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"NLP for DeepLearning","slug":"NLP-for-DeepLearning","date":"2022-09-24T10:29:33.000Z","updated":"2022-10-14T18:17:53.319Z","comments":true,"path":"2022/09/24/NLP-for-DeepLearning/","link":"","permalink":"https://hehehuang.github.io/2022/09/24/NLP-for-DeepLearning/","excerpt":"","text":"DNNCNN RNN LSTM Sequence to Sequence BERT 1.","categories":[{"name":"NLP","slug":"NLP","permalink":"https://hehehuang.github.io/categories/NLP/"}],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://hehehuang.github.io/tags/Deep-Learning/"}]},{"title":"English Weekly Plan","slug":"English-Weekly-Plan","date":"2022-09-24T09:45:12.000Z","updated":"2022-09-30T12:05:06.565Z","comments":true,"path":"2022/09/24/English-Weekly-Plan/","link":"","permalink":"https://hehehuang.github.io/2022/09/24/English-Weekly-Plan/","excerpt":"","text":"THINGS YOU WILL NEED: 1 hour per day (30 minutes will work as well). a notebook and a pen to write down new vocabulary each day. an English song. an English a book. an English TV show. MONDAYS(Spend 30-40 minutes Reading) Read your book. Read the news. Read an article on http://simple.wikipedia.com Write down some new words in your notebook with their definition. Spend the rest of your hour: – Reading out loud from your book – Writing out some passages from your book. – Listening to the audiobook of your book. – Using Duolingo or other learning apps. TUESDAYS(Spend 30-40 minutes Writing) Write what you did yesterday, today, and tomorrow in your notebook. Write a few comments on Youtube videos. Write some sentences about what you like and dislike about your song, your book, and your TV show. Write a summary of what you have read in your book the day before. Put some new words in your dictionary. Spend the rest of your hour: – Reading what you have written. – Listening to what you have written by pasting your writing into Google translate and have it read it to you. – Reading what you have written out loud. – Using Duolingo or other learning apps. WEDNESDAYS(Spend 30-40 minutes Listening): Watch your TV show. Listen to your song. Listen to the Audiobook of your book if you have it. Watch a few Youtube videos. Put new words in your dictionary. Spend the rest of your hour: – Read about your TV show. – Write about how your song makes you feel. – Mimic or shadow people from your TV show. – Sing along to your song. THURSDAYS(Spend 30-40 minutes Speaking): Hire a tutor on: – Preply: http://tracking.preply.com/SH2X – Cambly: http://cambly.com – iTalki: http://italki.com Talk out loud. Narrate your life. Record yourself and play it back. Put words in your dictionary. Spend the rest of your hour: – Reading out loud. – Singing out loud. – Shadowing or mimicking actors from your TV show. FRIDAYS(Spend the Entire hour on Vocabulary): Review all the words in your dictionary. Write them out. Say them out loud. Use them in a sentence. Make a http://quizlet.com set. Make flashcards. Work until you have them all memorized. WEEKENDS: Find a new song. Find a new book. Find a new TV show. Take a break. References:https://www.youtube.com/watch?v=5-T6Xqlh6BU&amp;t=283s","categories":[{"name":"English","slug":"English","permalink":"https://hehehuang.github.io/categories/English/"}],"tags":[]},{"title":"Write an article","slug":"Write-an-artical","date":"2022-09-24T08:56:07.000Z","updated":"2022-09-24T09:43:02.358Z","comments":true,"path":"2022/09/24/Write-an-artical/","link":"","permalink":"https://hehehuang.github.io/2022/09/24/Write-an-artical/","excerpt":"","text":"Five step to write an article1. Ask a question2. Write a thesis statement (answer the question)3. Write an introductionHow to write an introduction Grabbers (attention) Joke Proverb&#x2F;quote anecdote surprising fact curiosity(?) Topic(subject) -what reasons(or main ideas) (3) Thesis -argument whether the topic is negative and positive 5w1h 4. Prove your thesisEssay Body (Structure) How to write an paragraph Topic sentence &amp; Closing sentence identifies the topic states what will be said about the topic Specific details &amp; supporting facts Specific details &amp; supporting faccts （for example: Facts, example from a source) Your thinking about the facts your own thoughts about the details &amp; facts (analogy, analysis, interpretation or explanation of facts) 5. Write your conclusion6. Extra Topichow to write a summarizehow to write a comment Reference:https://www.youtube.com/watch?v=Mwv3OlYojWw&amp;t=505s https://www.youtube.com/watch?v=IN6IOSMviS4 https://www.youtube.com/watch?v=jLdvEFtUuMM&amp;t=56s","categories":[{"name":"English","slug":"English","permalink":"https://hehehuang.github.io/categories/English/"}],"tags":[{"name":"Writing","slug":"Writing","permalink":"https://hehehuang.github.io/tags/Writing/"}]},{"title":"Machine Learning","slug":"Machine-Learning","date":"2022-09-23T13:04:19.000Z","updated":"2022-09-23T13:04:19.039Z","comments":true,"path":"2022/09/23/Machine-Learning/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Machine-Learning/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Data Analysis with Pyspark","slug":"Data-Analysis-with-Pyspark","date":"2022-09-23T10:25:22.501Z","updated":"2022-09-23T10:36:13.511Z","comments":true,"path":"2022/09/23/Data-Analysis-with-Pyspark/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Pyspark/","excerpt":"","text":"","categories":[{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://hehehuang.github.io/categories/Data-Analysis/"}],"tags":[{"name":"PySpark","slug":"PySpark","permalink":"https://hehehuang.github.io/tags/PySpark/"}]},{"title":"Data Analysis with SQL","slug":"Data-Analysis-with-SQL","date":"2022-09-23T10:24:38.833Z","updated":"2022-09-23T10:36:39.635Z","comments":true,"path":"2022/09/23/Data-Analysis-with-SQL/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Data-Analysis-with-SQL/","excerpt":"","text":"","categories":[{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://hehehuang.github.io/categories/Data-Analysis/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://hehehuang.github.io/tags/SQL/"}]},{"title":"Data Analysis with Python","slug":"Data-Analysis-with-Python","date":"2022-09-23T10:24:12.280Z","updated":"2022-11-25T10:49:04.046Z","comments":true,"path":"2022/09/23/Data-Analysis-with-Python/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Data-Analysis-with-Python/","excerpt":"","text":"from python for data analysis NumpyPandasMatplotlib","categories":[{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://hehehuang.github.io/categories/Data-Analysis/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/tags/Python/"}]},{"title":"Python OOP","slug":"Python OOP","date":"2022-09-23T10:22:54.991Z","updated":"2022-11-26T10:37:00.297Z","comments":true,"path":"2022/09/23/Python OOP/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Python%20OOP/","excerpt":"","text":"魔法方法：什么是魔法方法：一些经典的魔法方法 123__init__() # 初始化对象__str__() # 定义字符说明， 在print（object）的时候， 会这里定义的说明__del__() # 删除对象 抽象：封装什么是私有的属性怎么定义？12__name # 私有属性__privateFunc()# 私有方法 类class的语法是什么？12class ClassName(object): pass 继承继承的语法是？1234class Father(object): passclass Son(Father): pass 当复制类同名属性，方法时，默认调用？调用子类的方法 继承顺序怎么查看？1__mro__() 同名的情况下， 怎么调用父类的方法？方法一： 父类class. 函数名（） 方法二：super().函数名（） 类中，self的意义是什么？未来对象实例call 这个方法时，能把这个实例对象传入 多态什么是多态？他是怎么构成的？ 父类提供公共方法。 子类重写方法 调用者定义父类作为参数传入，使用父类方法 正式调用是， 传入子类对象 类属性：属性每个对象都有 1 类方法： 类方法的特点是什么？ @classmethod 第一个参数传入 cls， 类对象 静态方法：静态方法的特点是什么？ @staticmethod 形参中不用传cls，self 对象或者类都可以调用 静态方法的使用场景是？取消不需要的参数传递， 这样就可以减少不必要的内存占用和性能消耗 123@staticmethoddef func(): pass 类方法 学生管理项目描述：","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[]},{"title":"Python Basic","slug":"Python Basic","date":"2022-09-23T10:21:30.629Z","updated":"2022-11-26T10:37:35.612Z","comments":true,"path":"2022/09/23/Python Basic/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Python%20Basic/","excerpt":"","text":"解释型与编译型有什么差别？程序写好之后,需要转换成⼆进制的机器码才能执⾏ 对于编译型语⾔通过编译器编译之后可以直接将代码⽣成⼆进制程序执⾏ ⽽对于解释型语⾔需要在执⾏的时候通过解释器解释⼀段执⾏⼀段 p y opening quotation mark, brace 数据结构：Stringusing variable in string 1full_name = f&#x27;&#123;first_name&#125;&#123;last_name&#125;&#x27; adding whitespce to string with tabs or newlines 123print(&#x27;\\tPython&#x27;)\\t means tabs\\n means newlines stripping 1Stripping syntax error : indicates that interpreter doesn’t recognize something in the code as valid python code. for example: 123# before python 3.6print(f&#x27;&#123;name&#125;&#x27;) # it will causing the syntax error, because interpreter doesn&#x27;t recoginize the code. Numberprecisely decimal Underscores in Numbers Multiple Assignment Constants Listmanipulating the listchanging, 1name[0]= &#x27;hh&#x27; add, 123# append# insert removing 1234# del# remove(&#x27;hh&#x27;)# pop() Oranizing the listsorting a list Permanently sorting a list temporarily printing a list in reverse order finding the length of a list intentional error Looping through an entire list a closer look at looping make numerical lists range() 1 list comprehensions working with part of a list slicing a list copy a list 1new_list = my_list[:] copy() function just give the tag for value. but make new list for object. we actually have two separate lists. 123456789101112import copy value = 3print(id(value) )new_value = copy.copy(value)print(id(new_value) )import copy my_list = [1,2,3,4]print(id(my_list) )new_list = copy.copy(my_list)print(id(new_list) ) loop list Tupleimmutable list: can not change DictionarySet流程If statementWhile StatementWhile loops​ 两个基本用法： ​ while i &lt;5, while not name: Functionpython 中有值传递与引用传递的概念么？没有！ 不像是C++如果直接将对象作为实参传入，会复制一个副本。 但是python 中，都是传入一个对象，或者是引用。 但指向的对象不可变时，Python解释器会创建副本 但指向的对象可变时，对象发生变化时，所有指向这个对象的变量发生了变化 python 中 函数可以作为参数使用么？可以的。 12def func01(): pass func01 存放的是函数的空间地址 func01（）找到空间地址，执行空间地址中的内容 递归：递归编程思想有什么特点？ 函数内部自己调用自己 函数需要有出口 Lambda函数lambda函数的应用场景是什么？当一个函数只有一个返回值当时候， 并且只有一行代码 lambda无参数与带参数是怎么写的，举例子 1234567lambda x: 100 lambda x:xlambda a, b , c = 100 : a + b + clambda *args : args #返回元组lambda **kwargs : kwarg # 返回字典lambda x : x if x &gt; 100 内置高阶函数Map函数有什么作用？1234def numSquare(x): return x ** 2 Map(numSquare, list) # map 函数返回一个迭代器， 迭代器中每个元素都是带入函数numSquare所出结果 Reduce函数有什么用？1234567def numAdd(a,b): return a + b import functoolsresult = functools.Reduce(numAdd,list)# Reduce的func 需要传入两个参数，func函数得出的结果 #跟下一个元素累计计算。 Filter的函数作用？1234def funcFilter(x): return x % 2 == 0result = Filter.(funcFIlter,list)# 过滤出符合要求的函数。返回filter的对象 推导式列表推导式列表推导式的语法是什么样的？123list1 = [x for x in range (1,5)]list2 = [x for x in range(1,5) if x % 2 == 0 ]list3 = [(i,j) for i in range(1,5) for j in range(1,5)] 字典推导式字典推导式的作用是什么？ 快速合并列表成字典 提取字典中目标数据 1 字典推导式FilesException为什么要有异常捕捉？捕获异常信息，不至于让程序崩溃。 异常信息： 异常名字+ 异常信息 怎么捕捉异常？123456789try: #codeexcept Exception: # code else: # some code will be excuted when there is no exceptionfinally: # some code will be excuted no matter there is exception 怎么自定义异常捕捉？ 定义异常类 raise 异常对象 捕捉异常对象 123456#场景应用：#设置密码需要在9位数以上，不然就要抛出异常try: #code exception Exception as result: #code to Testing your codebuild in data type 模块包Easy Principle indentation: 4 space Line Length: less than 80 characters blank line: proper blank line to seperate two sections if statement: i &gt; 4 [google python code styling]: https://google.github.io/styleguide/pyguide.html “google python code styling” Reference:&lt;&gt;","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[]},{"title":"Array & Linked List","slug":"Array & Linked List","date":"2022-09-23T10:20:09.606Z","updated":"2022-09-23T10:20:32.597Z","comments":true,"path":"2022/09/23/Array & Linked List/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Array%20&%20Linked%20List/","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://hehehuang.github.io/tags/Data-Structure/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://hehehuang.github.io/tags/Algorithm/"}]},{"title":"Data Engineer","slug":"Data Engineer","date":"2022-09-23T10:12:25.135Z","updated":"2022-09-23T10:16:35.833Z","comments":true,"path":"2022/09/23/Data Engineer/","link":"","permalink":"https://hehehuang.github.io/2022/09/23/Data%20Engineer/","excerpt":"","text":"Data Engineer What is Data Engineer? What is main duly for data engineer? how data engineer work with AWS? what can i learn for data engineer? Big Data: data pipeline, Cloud service","categories":[{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"},{"name":"Cloud Service","slug":"Big-Data/Cloud-Service","permalink":"https://hehehuang.github.io/categories/Big-Data/Cloud-Service/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://hehehuang.github.io/tags/AWS/"},{"name":"Data Warehouse","slug":"Data-Warehouse","permalink":"https://hehehuang.github.io/tags/Data-Warehouse/"},{"name":"NoSQL","slug":"NoSQL","permalink":"https://hehehuang.github.io/tags/NoSQL/"},{"name":"Data Pipeline","slug":"Data-Pipeline","permalink":"https://hehehuang.github.io/tags/Data-Pipeline/"}]},{"title":"Tree","slug":"Tree","date":"2022-09-22T08:36:43.586Z","updated":"2022-09-22T08:42:39.475Z","comments":true,"path":"2022/09/22/Tree/","link":"","permalink":"https://hehehuang.github.io/2022/09/22/Tree/","excerpt":"","text":"Tree is the basic data Structure 12def searchTree():","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://hehehuang.github.io/tags/Data-Structure/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://hehehuang.github.io/tags/Algorithm/"}]},{"title":"Sorting","slug":"Sorting","date":"2022-09-22T08:34:21.026Z","updated":"2022-09-22T08:42:36.580Z","comments":true,"path":"2022/09/22/Sorting/","link":"","permalink":"https://hehehuang.github.io/2022/09/22/Sorting/","excerpt":"","text":"sorting is algorithm to sort list in order. There are ten basic algorithm:","categories":[{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://hehehuang.github.io/tags/Algorithm/"}]},{"title":"AWS","slug":"AWS","date":"2022-09-19T17:45:57.203Z","updated":"2022-09-25T07:52:00.000Z","comments":true,"path":"2022/09/20/AWS/","link":"","permalink":"https://hehehuang.github.io/2022/09/20/AWS/","excerpt":"","text":"What is AWS?AWS is the cloud computing platform. computing: the bussiness requirement platform: provides the software like database and hardware: computing resource for example: Client want to deploy an web application. he just give money and offer the requirement to cloud computing platform and cloud computing platform will provide a series of services to deploy this web application. What is AWS with Big Data ecosystemAWS service: - Saas: software as a service RDS: amazon relational database service DynamoDB: K-V type NOSQL Redshift: Data warehouse (PostgreSQ) AWS Glue: ETL tool EMR: the Hadoop of AWS Kinesis: Stream process - Paas: Platform as a service S3: Amazon simple storge service &#x3D; HDFS AWS deep learning cloud watch &amp; cloud watch log - Iaas: Infrustructure as a service EC2 &#x3D; VMware VPC AWS Direct connect Data Science on AWSAutomated Machine Learning ingest Data into the cloud Explore the dataset prepare the data for model training Train model optimize model Deploy Model to production Pipelines and MLOps Streaming Analytics and machine learning Secure on AWS… Data Engineer with AWSthe","categories":[{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://hehehuang.github.io/tags/AWS/"}]},{"title":"Hadoop","slug":"Hadoop","date":"2022-09-19T17:45:57.203Z","updated":"2022-09-24T10:01:40.566Z","comments":true,"path":"2022/09/20/Hadoop/","link":"","permalink":"https://hehehuang.github.io/2022/09/20/Hadoop/","excerpt":"","text":"What is HadoopHadoop &#x3D; HDFS + MapReduce Why need Hadoop?because the cpu, distrbution computing. what is changes History of HadoopHadoop 1.0Hadoop 2.0Hadoop 3.0HDFSMapReducehow data is processed in MapReduce Map stage + Reduce shuffling in Partition the number of partitioner is decide by the number of Reduce task","categories":[{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"}],"tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://hehehuang.github.io/tags/Hadoop/"},{"name":"Mapreduce","slug":"Mapreduce","permalink":"https://hehehuang.github.io/tags/Mapreduce/"}]},{"title":"PySpark","slug":"PySpark","date":"2022-09-19T17:45:57.203Z","updated":"2022-09-25T12:46:25.000Z","comments":false,"path":"2022/09/20/PySpark/","link":"","permalink":"https://hehehuang.github.io/2022/09/20/PySpark/","excerpt":"","text":"What is Spark?Spark is a data processing engine for big data sets. Pyspark is that Spark can be call by python language. why need Spark?Advantages of spark handle many case: SparkSQL(dataframe) for data analysis Spark streaming for real-time analysis Spark Ml for machine learning work with many source Standalone, Hadoop, K8s,AWS better than Mapreduce, enhancement to mapreduce (in real-time processing) Why Spark is better than Mapreduce in terms of efficiency Mapreduce takes input from the HDFS, each map task process it , keeps in memory ,if exceed the default 100MB(io.sort.mb), then it split to disk.reduce task take data from disk and continue to process it. Spark uses random access memory (RAM) to cache and process data instead of a file system. Spark creates a Directed Acyclic Graph (DAG) to schedule tasks and the orchestration of nodes across the Hadoop cluster. How Spark work in cluster?HDFS,Yarn,Spark HDFS: Name node, Data Node Yarn: Resource Manager, Node Manager Spark: Driver, Worker when spark start to work, it need HDFS to provide the data and Yarn to provide computing resource. Spark RDDFeatures: partitions distributed in cluster computing each split dependencies on each RDDs (lineage) Key-value RDDs have Partioner sent computing to data Two step in RDD: Transform: transform one RDD to another RDD 123456789from pyspark import SparkContextfrom pyspark import SparkConfconf = SparkConf()sc = SparkContext(conf=conf)rdd1 = sc.parallelize([1,2,3,4])rdd2 = rdd1.map(lambda x: x+1) Action: take action for the RDD, normally, the output will be value 1result = rdd2.collect() RDD Persistence and Caching Mechanismif there are two actions in an spark application. 123456rdd1 = sc.textfile(//:HDFS..)rdd2 = sc.map(lambda x: x+1)# one action rdd3 = rdd2.count()# another actionrdd4 = rdd2.count() one action means one job in spark application. the rdd will be released in memory, which is that rdd3 will be cleaned. the rdd4 is the result of action at the rdd2. it will be causing that the re-calculation of rdd2. for this senaria, we need the RDD Persistence and cache to save our time and cost. serveral caching mechanism is available. Spark narrow and wide transformationNarrow transformation provides one to one transformation which there is no shuffling of data cross the nodes (every node do their own work can the results are concatenated). Some examples of narrow transformation include: map(), flatMap(), filter(), sample(), union(). For wide transformation, all the elements are required to do the operation. Partition live in many partitions of parent RDD which results in shuffling of data across the nodes. Some examples of wide transformation include: intersection(), distinct(), groupByKey(), reduceByKey(). Spark CoreApplication in Spark Spark Content application with several jobs (Action), one job with several stage (wide transform), one stage with several tasks Spark SqlSpark StreamingSpark MLDataFrame BasedRDD BasedMLlib Referencehttps://www.ibm.com/cloud/blog/hadoop-vs-spark https://learn.microsoft.com/en-us/azure/hdinsight/spark/apache-spark-streaming-high-availability https://cedricyf.medium.com/get-started-on-apache-pyspark-part-2-15d62494c18a","categories":[{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"}],"tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://hehehuang.github.io/tags/Hadoop/"}]}],"categories":[{"name":"超级学习","slug":"超级学习","permalink":"https://hehehuang.github.io/categories/%E8%B6%85%E7%BA%A7%E5%AD%A6%E4%B9%A0/"},{"name":"Learning Method","slug":"Learning-Method","permalink":"https://hehehuang.github.io/categories/Learning-Method/"},{"name":"Math","slug":"Math","permalink":"https://hehehuang.github.io/categories/Math/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://hehehuang.github.io/categories/Machine-Learning/"},{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/categories/Python/"},{"name":"Computer Composition","slug":"Computer-Composition","permalink":"https://hehehuang.github.io/categories/Computer-Composition/"},{"name":"C++","slug":"C","permalink":"https://hehehuang.github.io/categories/C/"},{"name":"FGBA","slug":"FGBA","permalink":"https://hehehuang.github.io/categories/FGBA/"},{"name":"Big Data","slug":"Big-Data","permalink":"https://hehehuang.github.io/categories/Big-Data/"},{"name":"NLP","slug":"NLP","permalink":"https://hehehuang.github.io/categories/NLP/"},{"name":"English","slug":"English","permalink":"https://hehehuang.github.io/categories/English/"},{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://hehehuang.github.io/categories/Data-Analysis/"},{"name":"Cloud Service","slug":"Big-Data/Cloud-Service","permalink":"https://hehehuang.github.io/categories/Big-Data/Cloud-Service/"}],"tags":[{"name":"Generic Programming","slug":"Generic-Programming","permalink":"https://hehehuang.github.io/tags/Generic-Programming/"},{"name":"OOP","slug":"OOP","permalink":"https://hehehuang.github.io/tags/OOP/"},{"name":"PySpark","slug":"PySpark","permalink":"https://hehehuang.github.io/tags/PySpark/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://hehehuang.github.io/tags/Deep-Learning/"},{"name":"Writing","slug":"Writing","permalink":"https://hehehuang.github.io/tags/Writing/"},{"name":"SQL","slug":"SQL","permalink":"https://hehehuang.github.io/tags/SQL/"},{"name":"Python","slug":"Python","permalink":"https://hehehuang.github.io/tags/Python/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"https://hehehuang.github.io/tags/Data-Structure/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://hehehuang.github.io/tags/Algorithm/"},{"name":"AWS","slug":"AWS","permalink":"https://hehehuang.github.io/tags/AWS/"},{"name":"Data Warehouse","slug":"Data-Warehouse","permalink":"https://hehehuang.github.io/tags/Data-Warehouse/"},{"name":"NoSQL","slug":"NoSQL","permalink":"https://hehehuang.github.io/tags/NoSQL/"},{"name":"Data Pipeline","slug":"Data-Pipeline","permalink":"https://hehehuang.github.io/tags/Data-Pipeline/"},{"name":"Hadoop","slug":"Hadoop","permalink":"https://hehehuang.github.io/tags/Hadoop/"},{"name":"Mapreduce","slug":"Mapreduce","permalink":"https://hehehuang.github.io/tags/Mapreduce/"}]}